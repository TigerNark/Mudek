@page "/exam-analysis"
@using MudekServer.Models
@using MudekServer.Services
@inject LessonService LessonService
@inject NavigationManager NavigationManager
<head>
    <link href="css/exam-analysis.css" rel="stylesheet">
</head>

<h3>Ders Analizi ve Değerlendirme</h3>

<!-- Ders Seçimi -->
<div class="selection-form">
    <label>Ders Seçin: </label>
    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->
    <select @onchange="DersSecildi" disabled="@(!Dersler.Any())">
        <option disabled selected>Bir ders seçin</option>
        @foreach (var ders in Dersler)
        {
            <option value="@ders.CourseCode">@ders.CourseName</option>
        }
    </select>
    
</div>

<!-- LoPo Matrisi Tablosu -->
@if (loPoMatrix != null && loPoMatrix.Count > 0)
{
    <h4>LoPo Matrisi</h4>
    <div class="lo-po-matrix">
        <table>
            <thead>
                <tr>
                    <th>Öğrenim Çıktıları</th>
                    @for (int i = 1; i <= 11; i++)
                    {
                        <th>P@(i)</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var outcome in loPoMatrix)
                {
                    <tr>
                        <th>@outcome.Description</th>
                        @for (int i = 1; i <= 11; i++)
                        {
                            var key = $"P{i}Ö{outcome.Id}";
                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>LoPo matrisi verileri mevcut değil.</p>
}

@code {
    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste
    private List<LearningOutcome> loPoMatrix = new();
    private Dictionary<string, int> loPoValues = new();
    private string selectedCourseCode;

    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle
    private async Task DersSecildi(ChangeEventArgs e)
    {
        selectedCourseCode = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedCourseCode))
        {
            await LoadLoPoMatrix(selectedCourseCode);
        }
    }

    // LoPo Matrisi verilerini yükle
    private async Task LoadLoPoMatrix(string courseCode)
    {
        try
        {
            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);
            if (lesson != null)
            {
                loPoMatrix = lesson.LearningOutcomes.ToList();

                // LoPoRelations verilerini yükle
                foreach (var outcome in loPoMatrix)
                {
                    foreach (var relation in outcome.LoPoRelations)
                    {
                        var key = $"P{relation.ProgramOutcome}Ö{outcome.Id}";
                        loPoValues[key] = relation.Score;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"LoPo Matrisi Yükleme Hatası: {ex.Message}");
        }
    }

    // Sayfa ilk yüklendiğinde dersleri getir
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Dersleri Yükleme Hatası: {ex.Message}");
        }
    }
}
