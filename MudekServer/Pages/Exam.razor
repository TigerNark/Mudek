@page "/sinav-girisi"
@inject IJSRuntime JS
@inject LessonService LessonService
@inject SinavTurService SinavTurService
@inject StudentService StudentService

@using MudekServer.Models
@using MudekServer.Services

<head>
    <link rel="stylesheet" href="css/Exam.css">
</head>

<h3>Sınav Girişi</h3>

@if (isLoading)
{
    <p>Dersler ve sınav türleri yükleniyor...</p>
}
else
{
    <div class="form-group">
        <label for="dersSecim">Ders Seçin:</label>
        <select @onchange="DersSecildi">
            <option disabled selected>Bir ders seçin</option>
            @foreach (var ders in Dersler)
            {
                <option value="@ders.CourseCode">@ders.CourseName</option>
            }
        </select>
    </div>
}

@if (seciliDers != null)
{
    <div class="form-group">
        <label for="sinavSecim">Sınav Türü Seçin:</label>
        <select @onchange="SinavTuruSecildi">
            <option disabled selected>Bir sınav türü seçin</option>
            @foreach (var sinavTur in SinavTurleri)
            {
                <option value="@sinavTur.Adi">@sinavTur.Adi</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="sinavYuzdesi">Sınav Yüzdesi:</label>
        <input type="number" @bind="sinavYuzdesi" min="0" max="100" />
    </div>
}

@if (seciliSinavTur != null && sinavYuzdesi.HasValue)
{
    <div class="form-group">
        <label for="soruSayisi">Soru Sayısını Girin:</label>
        <input type="number" @bind="soruSayisi" min="1" />
    </div>

    <button @onclick="SorulariOlustur">Soruları Oluştur</button>

    @if (Sorular.Count > 0)
    {
        <h4>Soru Puanları ve Öğrenim Çıktıları</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Soru</th>
                    <th>Puan</th>
                    <th>Öğrenim Çıktıları</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var soru in Sorular)
                {
                    <tr>
                        <td>Soru @soru.SoruNumarasi</td>
                        <td>
                            <input type="number" @bind="soru.Puan" min="0" @oninput="CheckTotalPuan" />
                        </td>
                        <td>
                            @foreach (var ogrenimCiktisi in seciliDers.LearningOutcomes)
                            {
                                <label>
                                    <input type="checkbox" value="@ogrenimCiktisi.Description"
                                        @onchange="@(e => OgrenimCiktisiSecildi(soru, ogrenimCiktisi.Description, e))" />
                                    @ogrenimCiktisi.Description
                                </label>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button @onclick="OnNextClick">Sonraki</button>
    }
}

@if (showStudentScores)
{
    <h4>Öğrenci Notları</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Öğrenci Numarası</th>
                <th>Öğrenci Adı</th>
                @foreach (var soru in Sorular)
                {
                    <th>Soru @soru.SoruNumarasi</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var ogrenci in ogrenciler)
            {
                <tr>
                    <td>@ogrenci.Numara</td>
                    <td>@ogrenci.Isim @ogrenci.Soyisim</td>
                    @foreach (var soru in Sorular)
                    {
                        <td>
                            <input type="number" @bind="ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]" placeholder="Not girin"
                                min="0" max="@soru.Puan" /> / @soru.Puan
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <button >Kaydet</button>
}


@code {
    private List<Lesson> Dersler = new List<Lesson>();
    private List<SinavTur> SinavTurleri = new List<SinavTur>(); // Bu listeyi dinamik hale getireceğiz
    private List<Soru> Sorular = new List<Soru>();
    private Lesson seciliDers;
    private SinavTur seciliSinavTur;
    private int soruSayisi;
    private int? sinavYuzdesi;
    private bool isLoading = true;
    private List<Student> ogrenciler = new List<Student>(); // Öğrenci Listesi
    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>(); // Öğrenci Notları
    private Dictionary<int, Dictionary<int, List<string>>> ogrenciOgretimCiktilari = new Dictionary<int, Dictionary<int, List<string>>>(); // Öğrenim çıktıları

    private bool showStudentScores = false; // Öğrenci notlarını göstermek için kullanılan flag

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al
            Dersler = await LessonService.GetLessons();
            ogrenciler = await StudentService.GetStudentsAsync();
            SinavTurleri = await SinavTurService.GetSinavTurleriAsync(); // SinavTurService üzerinden sınav türlerini alıyoruz
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Veri yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            // Yükleme durumu güncelleniyor
            isLoading = false;
            StateHasChanged();
        }
    }

    private async void DersSecildi(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            // Ders seçimi yapıldı, ders bilgilerini yükle
            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());
            seciliSinavTur = null; // Sınav türünü sıfırlıyoruz
            Sorular.Clear(); // Soruları sıfırlıyoruz
            StateHasChanged();
        }
    }

    private void SinavTuruSecildi(ChangeEventArgs e)
    {
        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.Adi == e.Value.ToString());
    }

    private void SorulariOlustur()
    {
        Sorular.Clear();
        for (int i = 1; i <= soruSayisi; i++)
        {
            Sorular.Add(new Soru
            {
                SoruNumarasi = i,
                Puan = 0
            });
        }

        // Sorular oluşturulduktan sonra, ogrenciNotlar sözlüğünü başlatıyoruz.
        foreach (var ogrenci in ogrenciler)
        {
            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))
            {
                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();
            }

            foreach (var soru in Sorular)
            {
                // Her öğrenci ve her soru için puan başlatıyoruz (sıfır).
                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))
                {
                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;
                }
            }
        }
    }

    private void CheckTotalPuan()
    {
        // Toplam puan hesaplaması
    }

    private async Task OnNextClick()
    {
        // Geçiş işlemi
        showStudentScores = true; // Öğrenci notlarını göstermek için flag'yi true yapıyoruz.
    }

    // OgrenimCiktisiSecildi metodu
    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)
    {
        if ((bool)e.Value) // Eğer checkbox seçili ise
        {
            // Öğrenim çıktısını ekle
            if (!ogrenciOgretimCiktilari.ContainsKey(soru.SoruNumarasi))
            {
                ogrenciOgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();
            }

            foreach (var ogrenci in ogrenciler)
            {
                if (!ogrenciOgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))
                {
                    ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();
                }
                ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);
            }
        }
        else // Eğer checkbox seçimi kaldırıldıysa
        {
            foreach (var ogrenci in ogrenciler)
            {
                ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);
            }
        }
    }
}
