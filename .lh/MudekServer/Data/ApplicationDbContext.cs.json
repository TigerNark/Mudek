{
    "sourceFile": "MudekServer/Data/ApplicationDbContext.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1735080348520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735080492484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+using Microsoft.EntityFrameworkCore;\r\n+using MudekServer.Models;\r\n+\r\n+namespace MudekServer.Data\r\n+{\r\n+    public class ApplicationDbContext : DbContext\r\n+    {\r\n+        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\r\n+\r\n+        // DbSet'ler\r\n+        public DbSet<Lesson> Lessons { get; set; }\r\n+        public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n+        public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n+        public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n+        public DbSet<User> Users { get; set; }\r\n+        public DbSet<Student> Students { get; set; }\r\n+        public DbSet<Exam> Exams { get; set; }\r\n+        public DbSet<Soru> Sorular { get; set; }\r\n+        public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n+    public DbSet<Student> Student { get; set; }\r\n+    public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n+        \r\n+        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n+        {\r\n+            base.OnModelCreating(modelBuilder);\r\n+\r\n+\r\n+            // Lessons tablosu\r\n+            modelBuilder.Entity<Lesson>(entity =>\r\n+            {\r\n+                entity.ToTable(\"Lessons\");\r\n+                entity.HasKey(l => l.CourseCode).HasName(\"PK_Lessons\");\r\n+                entity.Property(l => l.CourseCode).HasColumnName(\"LessonId\").IsRequired();\r\n+                entity.Property(l => l.CourseName).HasColumnName(\"Lesson\").IsRequired();\r\n+                entity.Property(l => l.IsMandatory).HasColumnName(\"Mandatory\").IsRequired();\r\n+                entity.Property(l => l.GroupCode).HasColumnName(\"GroupCode\");\r\n+                entity.Property(l => l.AKTS).HasColumnName(\"AKTS\").IsRequired();\r\n+            });\r\n+\r\n+            // ProgramOutcomes tablosu\r\n+            modelBuilder.Entity<ProgramOutcomes>(entity =>\r\n+            {\r\n+                entity.ToTable(\"ProgramOutcomes\");\r\n+                entity.HasKey(p => p.Id);\r\n+\r\n+                // Lesson ile one-to-one ilişki\r\n+                entity.HasOne(p => p.Lesson)\r\n+                      .WithOne(l => l.ProgramOutcomes)\r\n+                      .HasForeignKey<ProgramOutcomes>(p => p.LessonId)\r\n+                      .OnDelete(DeleteBehavior.Cascade);\r\n+            });\r\n+\r\n+            // LearningOutcomes tablosu\r\n+            modelBuilder.Entity<LearningOutcome>(entity =>\r\n+            {\r\n+                entity.ToTable(\"LearningOutcomes\");\r\n+                entity.HasKey(lo => lo.Id);\r\n+\r\n+                entity.Property(lo => lo.Description)\r\n+                      .HasColumnName(\"Description\")\r\n+                      .IsRequired();\r\n+\r\n+                // Lesson ile one-to-many ilişki\r\n+                entity.HasOne(lo => lo.Lesson)\r\n+                      .WithMany(l => l.LearningOutcomes)\r\n+                      .HasForeignKey(lo => lo.CourseCode)\r\n+                      .OnDelete(DeleteBehavior.Cascade);\r\n+            });\r\n+\r\n+            // LoPoRelations tablosu\r\n+            modelBuilder.Entity<LoPoRelation>(entity =>\r\n+            {\r\n+                entity.ToTable(\"LoPoRelations\");\r\n+                entity.HasKey(lp => lp.Id);\r\n+\r\n+                // LearningOutcome ile ilişki\r\n+                entity.HasOne(lp => lp.LearningOutcome)\r\n+                      .WithMany(lo => lo.LoPoRelations)\r\n+                      .HasForeignKey(lp => lp.LearningOutcomeId)\r\n+                      .OnDelete(DeleteBehavior.Cascade);\r\n+\r\n+                entity.Property(lp => lp.ProgramOutcome)\r\n+                      .HasColumnName(\"ProgramOutcome\")\r\n+                      .IsRequired();\r\n+\r\n+                entity.Property(lp => lp.Score)\r\n+                      .HasColumnName(\"Score\")\r\n+                      .IsRequired();\r\n+            });\r\n+            modelBuilder.Entity<User>(entity =>\r\n+            {\r\n+                entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n+                entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n+                entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n+                entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n+            });\r\n+\r\n+        }\r\n+    }\r\n+}\r\n+public class User\r\n+{\r\n+    public int Id { get; set; }\r\n+    public string Email { get; set; }\r\n+    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735080551212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+using Microsoft.EntityFrameworkCore;\r\n+using MudekServer.Models;\r\n+\r\n+namespace MudekServer.Data\r\n+{\r\n+    public class ApplicationDbContext : DbContext\r\n+    {\r\n+        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\r\n+\r\n+        // DbSet'ler\r\n+        public DbSet<Lesson> Lessons { get; set; }\r\n+        public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n+        public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n+        public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n+        public DbSet<User> Users { get; set; }\r\n+        public DbSet<Student> Students { get; set; }\r\n+        public DbSet<Exam> Exams { get; set; }\r\n+        public DbSet<Soru> Sorular { get; set; }\r\n+        public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n+        public DbSet<Student> Student { get; set; }\r\n+         public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n+        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n+        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n+        {\r\n+            base.OnModelCreating(modelBuilder);\r\n+\r\n+\r\n+            // Lessons tablosu\r\n+            modelBuilder.Entity<Lesson>(entity =>\r\n+            {\r\n+                entity.ToTable(\"Lessons\");\r\n+                entity.HasKey(l => l.CourseCode).HasName(\"PK_Lessons\");\r\n+                entity.Property(l => l.CourseCode).HasColumnName(\"LessonId\").IsRequired();\r\n+                entity.Property(l => l.CourseName).HasColumnName(\"Lesson\").IsRequired();\r\n+                entity.Property(l => l.IsMandatory).HasColumnName(\"Mandatory\").IsRequired();\r\n+                entity.Property(l => l.GroupCode).HasColumnName(\"GroupCode\");\r\n+                entity.Property(l => l.AKTS).HasColumnName(\"AKTS\").IsRequired();\r\n+            });\r\n+\r\n+            // ProgramOutcomes tablosu\r\n+            modelBuilder.Entity<ProgramOutcomes>(entity =>\r\n+            {\r\n+                entity.ToTable(\"ProgramOutcomes\");\r\n+                entity.HasKey(p => p.Id);\r\n+\r\n+                // Lesson ile one-to-one ilişki\r\n+                entity.HasOne(p => p.Lesson)\r\n+                      .WithOne(l => l.ProgramOutcomes)\r\n+                      .HasForeignKey<ProgramOutcomes>(p => p.LessonId)\r\n+                      .OnDelete(DeleteBehavior.Cascade);\r\n+            });\r\n+\r\n+            // LearningOutcomes tablosu\r\n+            modelBuilder.Entity<LearningOutcome>(entity =>\r\n+            {\r\n+                entity.ToTable(\"LearningOutcomes\");\r\n+                entity.HasKey(lo => lo.Id);\r\n+\r\n+                entity.Property(lo => lo.Description)\r\n+                      .HasColumnName(\"Description\")\r\n+                      .IsRequired();\r\n+\r\n+                // Lesson ile one-to-many ilişki\r\n+                entity.HasOne(lo => lo.Lesson)\r\n+                      .WithMany(l => l.LearningOutcomes)\r\n+                      .HasForeignKey(lo => lo.CourseCode)\r\n+                      .OnDelete(DeleteBehavior.Cascade);\r\n+            });\r\n+\r\n+            // LoPoRelations tablosu\r\n+            modelBuilder.Entity<LoPoRelation>(entity =>\r\n+            {\r\n+                entity.ToTable(\"LoPoRelations\");\r\n+                entity.HasKey(lp => lp.Id);\r\n+\r\n+                // LearningOutcome ile ilişki\r\n+                entity.HasOne(lp => lp.LearningOutcome)\r\n+                      .WithMany(lo => lo.LoPoRelations)\r\n+                      .HasForeignKey(lp => lp.LearningOutcomeId)\r\n+                      .OnDelete(DeleteBehavior.Cascade);\r\n+\r\n+                entity.Property(lp => lp.ProgramOutcome)\r\n+                      .HasColumnName(\"ProgramOutcome\")\r\n+                      .IsRequired();\r\n+\r\n+                entity.Property(lp => lp.Score)\r\n+                      .HasColumnName(\"Score\")\r\n+                      .IsRequired();\r\n+            });\r\n+            modelBuilder.Entity<User>(entity =>\r\n+            {\r\n+                entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n+                entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n+                entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n+                entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n+            });\r\n+\r\n+        }\r\n+    }\r\n+}\r\n+public class User\r\n+{\r\n+    public int Id { get; set; }\r\n+    public string Email { get; set; }\r\n+    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735080777269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         public DbSet<Student> Students { get; set; }\r\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-        public DbSet<Student> Student { get; set; }\r\n+        public DbSet<Student> Students { get; set; }\r\n          public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n         public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n         protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n         {\r\n@@ -102,217 +102,5 @@\n {\r\n     public int Id { get; set; }\r\n     public string Email { get; set; }\r\n     public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n-}\n-using Microsoft.EntityFrameworkCore;\r\n-using MudekServer.Models;\r\n-\r\n-namespace MudekServer.Data\r\n-{\r\n-    public class ApplicationDbContext : DbContext\r\n-    {\r\n-        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\r\n-\r\n-        // DbSet'ler\r\n-        public DbSet<Lesson> Lessons { get; set; }\r\n-        public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n-        public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n-        public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n-        public DbSet<User> Users { get; set; }\r\n-        public DbSet<Student> Students { get; set; }\r\n-        public DbSet<Exam> Exams { get; set; }\r\n-        public DbSet<Soru> Sorular { get; set; }\r\n-        public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-    public DbSet<Student> Student { get; set; }\r\n-    public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n-        \r\n-        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n-        {\r\n-            base.OnModelCreating(modelBuilder);\r\n-\r\n-\r\n-            // Lessons tablosu\r\n-            modelBuilder.Entity<Lesson>(entity =>\r\n-            {\r\n-                entity.ToTable(\"Lessons\");\r\n-                entity.HasKey(l => l.CourseCode).HasName(\"PK_Lessons\");\r\n-                entity.Property(l => l.CourseCode).HasColumnName(\"LessonId\").IsRequired();\r\n-                entity.Property(l => l.CourseName).HasColumnName(\"Lesson\").IsRequired();\r\n-                entity.Property(l => l.IsMandatory).HasColumnName(\"Mandatory\").IsRequired();\r\n-                entity.Property(l => l.GroupCode).HasColumnName(\"GroupCode\");\r\n-                entity.Property(l => l.AKTS).HasColumnName(\"AKTS\").IsRequired();\r\n-            });\r\n-\r\n-            // ProgramOutcomes tablosu\r\n-            modelBuilder.Entity<ProgramOutcomes>(entity =>\r\n-            {\r\n-                entity.ToTable(\"ProgramOutcomes\");\r\n-                entity.HasKey(p => p.Id);\r\n-\r\n-                // Lesson ile one-to-one ilişki\r\n-                entity.HasOne(p => p.Lesson)\r\n-                      .WithOne(l => l.ProgramOutcomes)\r\n-                      .HasForeignKey<ProgramOutcomes>(p => p.LessonId)\r\n-                      .OnDelete(DeleteBehavior.Cascade);\r\n-            });\r\n-\r\n-            // LearningOutcomes tablosu\r\n-            modelBuilder.Entity<LearningOutcome>(entity =>\r\n-            {\r\n-                entity.ToTable(\"LearningOutcomes\");\r\n-                entity.HasKey(lo => lo.Id);\r\n-\r\n-                entity.Property(lo => lo.Description)\r\n-                      .HasColumnName(\"Description\")\r\n-                      .IsRequired();\r\n-\r\n-                // Lesson ile one-to-many ilişki\r\n-                entity.HasOne(lo => lo.Lesson)\r\n-                      .WithMany(l => l.LearningOutcomes)\r\n-                      .HasForeignKey(lo => lo.CourseCode)\r\n-                      .OnDelete(DeleteBehavior.Cascade);\r\n-            });\r\n-\r\n-            // LoPoRelations tablosu\r\n-            modelBuilder.Entity<LoPoRelation>(entity =>\r\n-            {\r\n-                entity.ToTable(\"LoPoRelations\");\r\n-                entity.HasKey(lp => lp.Id);\r\n-\r\n-                // LearningOutcome ile ilişki\r\n-                entity.HasOne(lp => lp.LearningOutcome)\r\n-                      .WithMany(lo => lo.LoPoRelations)\r\n-                      .HasForeignKey(lp => lp.LearningOutcomeId)\r\n-                      .OnDelete(DeleteBehavior.Cascade);\r\n-\r\n-                entity.Property(lp => lp.ProgramOutcome)\r\n-                      .HasColumnName(\"ProgramOutcome\")\r\n-                      .IsRequired();\r\n-\r\n-                entity.Property(lp => lp.Score)\r\n-                      .HasColumnName(\"Score\")\r\n-                      .IsRequired();\r\n-            });\r\n-            modelBuilder.Entity<User>(entity =>\r\n-            {\r\n-                entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n-                entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n-                entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n-                entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n-            });\r\n-\r\n-        }\r\n-    }\r\n-}\r\n-public class User\r\n-{\r\n-    public int Id { get; set; }\r\n-    public string Email { get; set; }\r\n-    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n-}\n-using Microsoft.EntityFrameworkCore;\r\n-using MudekServer.Models;\r\n-\r\n-namespace MudekServer.Data\r\n-{\r\n-    public class ApplicationDbContext : DbContext\r\n-    {\r\n-        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\r\n-\r\n-        // DbSet'ler\r\n-        public DbSet<Lesson> Lessons { get; set; }\r\n-        public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n-        public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n-        public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n-        public DbSet<User> Users { get; set; }\r\n-        public DbSet<Student> Students { get; set; }\r\n-        public DbSet<Exam> Exams { get; set; }\r\n-        public DbSet<Soru> Sorular { get; set; }\r\n-        public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-public DbSet<Student> Students { get; set; }\r\n-    public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n-        \r\n-        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n-        {\r\n-            base.OnModelCreating(modelBuilder);\r\n-\r\n-\r\n-            // Lessons tablosu\r\n-            modelBuilder.Entity<Lesson>(entity =>\r\n-            {\r\n-                entity.ToTable(\"Lessons\");\r\n-                entity.HasKey(l => l.CourseCode).HasName(\"PK_Lessons\");\r\n-                entity.Property(l => l.CourseCode).HasColumnName(\"LessonId\").IsRequired();\r\n-                entity.Property(l => l.CourseName).HasColumnName(\"Lesson\").IsRequired();\r\n-                entity.Property(l => l.IsMandatory).HasColumnName(\"Mandatory\").IsRequired();\r\n-                entity.Property(l => l.GroupCode).HasColumnName(\"GroupCode\");\r\n-                entity.Property(l => l.AKTS).HasColumnName(\"AKTS\").IsRequired();\r\n-            });\r\n-\r\n-            // ProgramOutcomes tablosu\r\n-            modelBuilder.Entity<ProgramOutcomes>(entity =>\r\n-            {\r\n-                entity.ToTable(\"ProgramOutcomes\");\r\n-                entity.HasKey(p => p.Id);\r\n-\r\n-                // Lesson ile one-to-one ilişki\r\n-                entity.HasOne(p => p.Lesson)\r\n-                      .WithOne(l => l.ProgramOutcomes)\r\n-                      .HasForeignKey<ProgramOutcomes>(p => p.LessonId)\r\n-                      .OnDelete(DeleteBehavior.Cascade);\r\n-            });\r\n-\r\n-            // LearningOutcomes tablosu\r\n-            modelBuilder.Entity<LearningOutcome>(entity =>\r\n-            {\r\n-                entity.ToTable(\"LearningOutcomes\");\r\n-                entity.HasKey(lo => lo.Id);\r\n-\r\n-                entity.Property(lo => lo.Description)\r\n-                      .HasColumnName(\"Description\")\r\n-                      .IsRequired();\r\n-\r\n-                // Lesson ile one-to-many ilişki\r\n-                entity.HasOne(lo => lo.Lesson)\r\n-                      .WithMany(l => l.LearningOutcomes)\r\n-                      .HasForeignKey(lo => lo.CourseCode)\r\n-                      .OnDelete(DeleteBehavior.Cascade);\r\n-            });\r\n-\r\n-            // LoPoRelations tablosu\r\n-            modelBuilder.Entity<LoPoRelation>(entity =>\r\n-            {\r\n-                entity.ToTable(\"LoPoRelations\");\r\n-                entity.HasKey(lp => lp.Id);\r\n-\r\n-                // LearningOutcome ile ilişki\r\n-                entity.HasOne(lp => lp.LearningOutcome)\r\n-                      .WithMany(lo => lo.LoPoRelations)\r\n-                      .HasForeignKey(lp => lp.LearningOutcomeId)\r\n-                      .OnDelete(DeleteBehavior.Cascade);\r\n-\r\n-                entity.Property(lp => lp.ProgramOutcome)\r\n-                      .HasColumnName(\"ProgramOutcome\")\r\n-                      .IsRequired();\r\n-\r\n-                entity.Property(lp => lp.Score)\r\n-                      .HasColumnName(\"Score\")\r\n-                      .IsRequired();\r\n-            });\r\n-            modelBuilder.Entity<User>(entity =>\r\n-            {\r\n-                entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n-                entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n-                entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n-                entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n-            });\r\n-\r\n-        }\r\n-    }\r\n-}\r\n-public class User\r\n-{\r\n-    public int Id { get; set; }\r\n-    public string Email { get; set; }\r\n-    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735080870194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,16 +16,15 @@\n         public DbSet<Student> Students { get; set; }\r\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-        public DbSet<Student> Students { get; set; }\r\n-         public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n+        public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme\r\n         public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n+\r\n         protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n         {\r\n             base.OnModelCreating(modelBuilder);\r\n \r\n-\r\n             // Lessons tablosu\r\n             modelBuilder.Entity<Lesson>(entity =>\r\n             {\r\n                 entity.ToTable(\"Lessons\");\r\n@@ -86,21 +85,16 @@\n                 entity.Property(lp => lp.Score)\r\n                       .HasColumnName(\"Score\")\r\n                       .IsRequired();\r\n             });\r\n+\r\n+            // User tablosu\r\n             modelBuilder.Entity<User>(entity =>\r\n             {\r\n                 entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n                 entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n                 entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n                 entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n             });\r\n-\r\n         }\r\n     }\r\n }\r\n-public class User\r\n-{\r\n-    public int Id { get; set; }\r\n-    public string Email { get; set; }\r\n\\ No newline at end of file\n-    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n-}\n"
                },
                {
                    "date": 1735080880732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         public DbSet<Lesson> Lessons { get; set; }\r\n         public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n         public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n         public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n-        public DbSet<User> Users { get; set; }\r\n+        public DbSet<UserSecretsConfigurationExtensions> Users { get; set; }\r\n         public DbSet<Student> Students { get; set; }\r\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n"
                },
                {
                    "date": 1735080893259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,20 +11,21 @@\n         public DbSet<Lesson> Lessons { get; set; }\r\n         public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n         public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n         public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n-        public DbSet<UserSecretsConfigurationExtensions> Users { get; set; }\r\n+        public DbSet<User> Users { get; set; }\r\n         public DbSet<Student> Students { get; set; }\r\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-        public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme\r\n+        public DbSet<Student> Student { get; set; }\r\n+         public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n         public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n-\r\n         protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n         {\r\n             base.OnModelCreating(modelBuilder);\r\n \r\n+\r\n             // Lessons tablosu\r\n             modelBuilder.Entity<Lesson>(entity =>\r\n             {\r\n                 entity.ToTable(\"Lessons\");\r\n@@ -85,16 +86,21 @@\n                 entity.Property(lp => lp.Score)\r\n                       .HasColumnName(\"Score\")\r\n                       .IsRequired();\r\n             });\r\n-\r\n-            // User tablosu\r\n             modelBuilder.Entity<User>(entity =>\r\n             {\r\n                 entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n                 entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n                 entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n                 entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n             });\r\n+\r\n         }\r\n     }\r\n }\r\n+public class User\r\n+{\r\n+    public int Id { get; set; }\r\n+    public string Email { get; set; }\r\n+    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735080924477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         public DbSet<Student> Students { get; set; }\r\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-        public DbSet<Student> Student { get; set; }\r\n+       \r\n          public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n         public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n         protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n         {\r\n"
                },
                {
                    "date": 1735080955032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n        \r\n-         public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n+         public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme     \r\n         public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n         protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n         {\r\n             base.OnModelCreating(modelBuilder);\r\n"
                },
                {
                    "date": 1735081147432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,11 @@\n         public DbSet<Student> Students { get; set; }\r\n         public DbSet<Exam> Exams { get; set; }\r\n         public DbSet<Soru> Sorular { get; set; }\r\n         public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\n-       \r\n-         public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme     \r\n-        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTurleri DbSet'ini ekliyoruz\r\n+        public DbSet<Student> Student { get; set; }\r\n+     public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n+        \r\n         protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n         {\r\n             base.OnModelCreating(modelBuilder);\r\n \r\n"
                }
            ],
            "date": 1735080348520,
            "name": "Commit-0",
            "content": "using Microsoft.EntityFrameworkCore;\r\nusing MudekServer.Models;\r\n\r\nnamespace MudekServer.Data\r\n{\r\n    public class ApplicationDbContext : DbContext\r\n    {\r\n        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\r\n\r\n        // DbSet'ler\r\n        public DbSet<Lesson> Lessons { get; set; }\r\n        public DbSet<ProgramOutcomes> ProgramOutcomes { get; set; }\r\n        public DbSet<LearningOutcome> LearningOutcomes { get; set; }\r\n        public DbSet<LoPoRelation> LoPoRelations { get; set; }\r\n        public DbSet<User> Users { get; set; }\r\n        public DbSet<Student> Students { get; set; }\r\n        public DbSet<Exam> Exams { get; set; }\r\n        public DbSet<Soru> Sorular { get; set; }\r\n        public DbSet<ExamQuestion> ExamQuestions { get; set; }\r\npublic DbSet<Student> Students { get; set; }\r\n    public DbSet<StudentScore> StudentScores { get; set; }  // Yeni ekleme        public DbSet<SinavTur> SinavTurleri { get; set; }  // SinavTur tablosu\r\n        \r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            base.OnModelCreating(modelBuilder);\r\n\r\n\r\n            // Lessons tablosu\r\n            modelBuilder.Entity<Lesson>(entity =>\r\n            {\r\n                entity.ToTable(\"Lessons\");\r\n                entity.HasKey(l => l.CourseCode).HasName(\"PK_Lessons\");\r\n                entity.Property(l => l.CourseCode).HasColumnName(\"LessonId\").IsRequired();\r\n                entity.Property(l => l.CourseName).HasColumnName(\"Lesson\").IsRequired();\r\n                entity.Property(l => l.IsMandatory).HasColumnName(\"Mandatory\").IsRequired();\r\n                entity.Property(l => l.GroupCode).HasColumnName(\"GroupCode\");\r\n                entity.Property(l => l.AKTS).HasColumnName(\"AKTS\").IsRequired();\r\n            });\r\n\r\n            // ProgramOutcomes tablosu\r\n            modelBuilder.Entity<ProgramOutcomes>(entity =>\r\n            {\r\n                entity.ToTable(\"ProgramOutcomes\");\r\n                entity.HasKey(p => p.Id);\r\n\r\n                // Lesson ile one-to-one ilişki\r\n                entity.HasOne(p => p.Lesson)\r\n                      .WithOne(l => l.ProgramOutcomes)\r\n                      .HasForeignKey<ProgramOutcomes>(p => p.LessonId)\r\n                      .OnDelete(DeleteBehavior.Cascade);\r\n            });\r\n\r\n            // LearningOutcomes tablosu\r\n            modelBuilder.Entity<LearningOutcome>(entity =>\r\n            {\r\n                entity.ToTable(\"LearningOutcomes\");\r\n                entity.HasKey(lo => lo.Id);\r\n\r\n                entity.Property(lo => lo.Description)\r\n                      .HasColumnName(\"Description\")\r\n                      .IsRequired();\r\n\r\n                // Lesson ile one-to-many ilişki\r\n                entity.HasOne(lo => lo.Lesson)\r\n                      .WithMany(l => l.LearningOutcomes)\r\n                      .HasForeignKey(lo => lo.CourseCode)\r\n                      .OnDelete(DeleteBehavior.Cascade);\r\n            });\r\n\r\n            // LoPoRelations tablosu\r\n            modelBuilder.Entity<LoPoRelation>(entity =>\r\n            {\r\n                entity.ToTable(\"LoPoRelations\");\r\n                entity.HasKey(lp => lp.Id);\r\n\r\n                // LearningOutcome ile ilişki\r\n                entity.HasOne(lp => lp.LearningOutcome)\r\n                      .WithMany(lo => lo.LoPoRelations)\r\n                      .HasForeignKey(lp => lp.LearningOutcomeId)\r\n                      .OnDelete(DeleteBehavior.Cascade);\r\n\r\n                entity.Property(lp => lp.ProgramOutcome)\r\n                      .HasColumnName(\"ProgramOutcome\")\r\n                      .IsRequired();\r\n\r\n                entity.Property(lp => lp.Score)\r\n                      .HasColumnName(\"Score\")\r\n                      .IsRequired();\r\n            });\r\n            modelBuilder.Entity<User>(entity =>\r\n            {\r\n                entity.ToTable(\"Users\"); // Users tablosunu belirtiyoruz\r\n                entity.HasKey(u => u.Id); // Id, kullanıcıyı benzersiz olarak tanımlar\r\n                entity.Property(u => u.Email).IsRequired(); // E-posta zorunlu\r\n                entity.Property(u => u.Password).IsRequired(); // Parola zorunlu\r\n            });\r\n\r\n        }\r\n    }\r\n}\r\npublic class User\r\n{\r\n    public int Id { get; set; }\r\n    public string Email { get; set; }\r\n    public string Password { get; set; } // Gerçek uygulamalarda şifrelerin hash'lenmesi gerektiğini unutmayın\r\n}"
        }
    ]
}