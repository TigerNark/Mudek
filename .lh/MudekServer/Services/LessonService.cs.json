{
    "sourceFile": "MudekServer/Services/LessonService.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734892996732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734893001942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,13 +98,13 @@\n                 throw new InvalidOperationException(\"Program çıktıları güncellenirken bir hata oluştu.\", ex);\r\n             }\r\n         }\r\n         public async Task<Lesson> GetLessonWithLoPoRelations(string courseCode)\r\n-{\r\n-    return await _context.Lessons\r\n-        .Include(l => l.LearningOutcomes)\r\n-            .ThenInclude(lo => lo.LoPoRelations)\r\n-        .FirstOrDefaultAsync(l => l.CourseCode == courseCode);\r\n-}\r\n+        {\r\n+            return await _context.Lessons\r\n+                .Include(l => l.LearningOutcomes)\r\n+                    .ThenInclude(lo => lo.LoPoRelations)\r\n+                .FirstOrDefaultAsync(l => l.CourseCode == courseCode);\r\n+        }\r\n \r\n     }\r\n }\r\n"
                },
                {
                    "date": 1734893155262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+using MudekServer.Models;\r\n+using MudekServer.Data;\r\n+using Microsoft.EntityFrameworkCore;\r\n+using System.Collections.Generic;\r\n+using System.Linq;\r\n+using System.Threading.Tasks;\r\n+\r\n+namespace MudekServer.Services\r\n+{\r\n+    public class LessonService\r\n+    {\r\n+        private readonly ApplicationDbContext _context;\r\n+\r\n+        // Constructor\r\n+        public LessonService(ApplicationDbContext context)\r\n+        {\r\n+            _context = context;\r\n+        }\r\n+\r\n+        // Mevcut dersleri veritabanından döndüren fonksiyon\r\n+        public async Task<List<Lesson>> GetLessons(bool includeProgramOutcomes = true)\r\n+        {\r\n+            if (includeProgramOutcomes)\r\n+            {\r\n+                return await _context.Lessons\r\n+                    .Include(l => l.ProgramOutcomes)\r\n+                    .AsNoTracking()\r\n+                    .ToListAsync();\r\n+            }\r\n+            else\r\n+            {\r\n+                return await _context.Lessons\r\n+                    .AsNoTracking()\r\n+                    .ToListAsync();\r\n+            }\r\n+        }\r\n+\r\n+        public async Task<Lesson> GetLessonByCodeAsync(string courseCode)\r\n+        {\r\n+            return await _context.Lessons\r\n+                .Include(l => l.LearningOutcomes)\r\n+                .FirstOrDefaultAsync(l => l.CourseCode == courseCode);\r\n+        }\r\n+        // Yeni ders ekleyen fonksiyon\r\n+        public async Task AddLesson(Lesson lesson)\r\n+        {\r\n+            try\r\n+            {\r\n+                _context.Lessons.Add(lesson);\r\n+                await _context.SaveChangesAsync();\r\n+            }\r\n+            catch (Exception ex)\r\n+            {\r\n+                // Hata loglama veya özel hata işleme yapılabilir\r\n+                throw new InvalidOperationException(\"Ders eklenirken bir hata oluştu.\", ex);\r\n+            }\r\n+        }\r\n+\r\n+\r\n+        // Dersin ProgramOutcomes bilgilerini güncelleme fonksiyonu\r\n+        public async Task UpdateLessonProgramOutcomes(Lesson lesson)\r\n+        {\r\n+            try\r\n+            {\r\n+                // Veritabanında ilgili dersin program çıktısı ortalamalarını güncelleme\r\n+                var existingLesson = await _context.Lessons\r\n+                    .Include(l => l.ProgramOutcomes) // ProgramOutcomes ilişkisini dahil et\r\n+                    .FirstOrDefaultAsync(l => l.CourseCode == lesson.CourseCode);\r\n+\r\n+                if (existingLesson != null)\r\n+                {\r\n+                    // ProgramOutcomes null ise yeni bir örnek oluştur\r\n+                    existingLesson.ProgramOutcomes ??= new ProgramOutcomes();\r\n+\r\n+                    // Program çıktılarının güncellenmesi\r\n+                    existingLesson.ProgramOutcomes.P1 = lesson.ProgramOutcomes.P1;\r\n+                    existingLesson.ProgramOutcomes.P2 = lesson.ProgramOutcomes.P2;\r\n+                    existingLesson.ProgramOutcomes.P3 = lesson.ProgramOutcomes.P3;\r\n+                    existingLesson.ProgramOutcomes.P4 = lesson.ProgramOutcomes.P4;\r\n+                    existingLesson.ProgramOutcomes.P5 = lesson.ProgramOutcomes.P5;\r\n+                    existingLesson.ProgramOutcomes.P6 = lesson.ProgramOutcomes.P6;\r\n+                    existingLesson.ProgramOutcomes.P7 = lesson.ProgramOutcomes.P7;\r\n+                    existingLesson.ProgramOutcomes.P8 = lesson.ProgramOutcomes.P8;\r\n+                    existingLesson.ProgramOutcomes.P9 = lesson.ProgramOutcomes.P9;\r\n+                    existingLesson.ProgramOutcomes.P10 = lesson.ProgramOutcomes.P10;\r\n+                    existingLesson.ProgramOutcomes.P11 = lesson.ProgramOutcomes.P11;\r\n+\r\n+                    await _context.SaveChangesAsync();\r\n+                }\r\n+                else\r\n+                {\r\n+                    throw new InvalidOperationException(\"Ders bulunamadı.\");\r\n+                }\r\n+            }\r\n+            catch (Exception ex)\r\n+            {\r\n+                // Hata loglama veya özel hata işleme yapılabilir\r\n+                throw new InvalidOperationException(\"Program çıktıları güncellenirken bir hata oluştu.\", ex);\r\n+            }\r\n+        }\r\n+        public async Task<Lesson> GetLessonWithLoPoRelations(string courseCode)\r\n+    {\r\n+        return await _context.Lessons\r\n+            .Include(l => l.LearningOutcomes)\r\n+            .ThenInclude(lo => lo.LoPoRelations)\r\n+            .FirstOrDefaultAsync(l => l.CourseCode == courseCode);\r\n+    }\r\n+    }\r\n+}\r\n"
                }
            ],
            "date": 1734892996732,
            "name": "Commit-0",
            "content": "using MudekServer.Models;\r\nusing MudekServer.Data;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace MudekServer.Services\r\n{\r\n    public class LessonService\r\n    {\r\n        private readonly ApplicationDbContext _context;\r\n\r\n        // Constructor\r\n        public LessonService(ApplicationDbContext context)\r\n        {\r\n            _context = context;\r\n        }\r\n\r\n        // Mevcut dersleri veritabanından döndüren fonksiyon\r\n        public async Task<List<Lesson>> GetLessons(bool includeProgramOutcomes = true)\r\n        {\r\n            if (includeProgramOutcomes)\r\n            {\r\n                return await _context.Lessons\r\n                    .Include(l => l.ProgramOutcomes)\r\n                    .AsNoTracking()\r\n                    .ToListAsync();\r\n            }\r\n            else\r\n            {\r\n                return await _context.Lessons\r\n                    .AsNoTracking()\r\n                    .ToListAsync();\r\n            }\r\n        }\r\n\r\n        public async Task<Lesson> GetLessonByCodeAsync(string courseCode)\r\n        {\r\n            return await _context.Lessons\r\n                .Include(l => l.LearningOutcomes)\r\n                .FirstOrDefaultAsync(l => l.CourseCode == courseCode);\r\n        }\r\n        // Yeni ders ekleyen fonksiyon\r\n        public async Task AddLesson(Lesson lesson)\r\n        {\r\n            try\r\n            {\r\n                _context.Lessons.Add(lesson);\r\n                await _context.SaveChangesAsync();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // Hata loglama veya özel hata işleme yapılabilir\r\n                throw new InvalidOperationException(\"Ders eklenirken bir hata oluştu.\", ex);\r\n            }\r\n        }\r\n\r\n\r\n        // Dersin ProgramOutcomes bilgilerini güncelleme fonksiyonu\r\n        public async Task UpdateLessonProgramOutcomes(Lesson lesson)\r\n        {\r\n            try\r\n            {\r\n                // Veritabanında ilgili dersin program çıktısı ortalamalarını güncelleme\r\n                var existingLesson = await _context.Lessons\r\n                    .Include(l => l.ProgramOutcomes) // ProgramOutcomes ilişkisini dahil et\r\n                    .FirstOrDefaultAsync(l => l.CourseCode == lesson.CourseCode);\r\n\r\n                if (existingLesson != null)\r\n                {\r\n                    // ProgramOutcomes null ise yeni bir örnek oluştur\r\n                    existingLesson.ProgramOutcomes ??= new ProgramOutcomes();\r\n\r\n                    // Program çıktılarının güncellenmesi\r\n                    existingLesson.ProgramOutcomes.P1 = lesson.ProgramOutcomes.P1;\r\n                    existingLesson.ProgramOutcomes.P2 = lesson.ProgramOutcomes.P2;\r\n                    existingLesson.ProgramOutcomes.P3 = lesson.ProgramOutcomes.P3;\r\n                    existingLesson.ProgramOutcomes.P4 = lesson.ProgramOutcomes.P4;\r\n                    existingLesson.ProgramOutcomes.P5 = lesson.ProgramOutcomes.P5;\r\n                    existingLesson.ProgramOutcomes.P6 = lesson.ProgramOutcomes.P6;\r\n                    existingLesson.ProgramOutcomes.P7 = lesson.ProgramOutcomes.P7;\r\n                    existingLesson.ProgramOutcomes.P8 = lesson.ProgramOutcomes.P8;\r\n                    existingLesson.ProgramOutcomes.P9 = lesson.ProgramOutcomes.P9;\r\n                    existingLesson.ProgramOutcomes.P10 = lesson.ProgramOutcomes.P10;\r\n                    existingLesson.ProgramOutcomes.P11 = lesson.ProgramOutcomes.P11;\r\n\r\n                    await _context.SaveChangesAsync();\r\n                }\r\n                else\r\n                {\r\n                    throw new InvalidOperationException(\"Ders bulunamadı.\");\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // Hata loglama veya özel hata işleme yapılabilir\r\n                throw new InvalidOperationException(\"Program çıktıları güncellenirken bir hata oluştu.\", ex);\r\n            }\r\n        }\r\n        public async Task<Lesson> GetLessonWithLoPoRelations(string courseCode)\r\n{\r\n    return await _context.Lessons\r\n        .Include(l => l.LearningOutcomes)\r\n            .ThenInclude(lo => lo.LoPoRelations)\r\n        .FirstOrDefaultAsync(l => l.CourseCode == courseCode);\r\n}\r\n\r\n    }\r\n}\r\n"
        }
    ]
}