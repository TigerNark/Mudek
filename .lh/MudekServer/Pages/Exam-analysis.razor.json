{
    "sourceFile": "MudekServer/Pages/Exam-analysis.razor",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1734891904747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734892002877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n <!-- Ders Seçimi -->\r\n <div class=\"selection-form\">\r\n     <label>Ders Seçin: </label>\r\n-    <select @bind=\"selectedLesson\">\r\n+    <select @onchange=\"DersSecildi\">\r\n         <option disabled selected>Bir ders seçin</option>\r\n         @foreach (var ders in Dersler)\r\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n@@ -23,15 +23,15 @@\n <!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n @if (lessonObjectives.Any())\r\n {\r\n     <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <table class=\"table table-striped table-bordered\">\r\n+    <table class=\"table\">\r\n         <thead>\r\n             <tr>\r\n                 <th>Program Çıktıları</th>\r\n-                @foreach (var outcome in programOutcomes)\r\n+                @foreach (var objective in programOutcomes)\r\n                 {\r\n-                    <th>@outcome</th>\r\n+                    <th>@objective</th>\r\n                 }\r\n             </tr>\r\n         </thead>\r\n         <tbody>\r\n@@ -47,64 +47,199 @@\n             }\r\n         </tbody>\r\n     </table>\r\n }\r\n-else if (!string.IsNullOrEmpty(selectedLesson))\r\n+\r\n+<!-- Sınav Türü Seçimi -->\r\n+@if (lessonObjectives.Any())\r\n {\r\n-    <p>Seçilen ders için ÖÇ ve PÇ verisi bulunamadı.</p>\r\n+    <div class=\"selection-form\">\r\n+        <label>Sınav Türü Seçin: </label>\r\n+        <select @bind=\"selectedExamType\">\r\n+            @foreach (var exam in examTypes)\r\n+            {\r\n+                <option value=\"@exam\">@exam</option>\r\n+            }\r\n+        </select>\r\n+        <button @onclick=\"LoadExamData\">Sınav Verilerini Göster</button>\r\n+    </div>\r\n }\r\n \r\n+<!-- Sınav Soruları ve ÖÇ İlişkisi Tablosu -->\r\n+@if (examQuestions.Any())\r\n+{\r\n+    <h4>@selectedLesson Dersinin @selectedExamType Sınavı</h4>\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Soru No</th>\r\n+                @for (int i = 1; i <= maxObjectives; i++)\r\n+                {\r\n+                    <th>ÖÇ @i</th>\r\n+                }\r\n+                <th>Maks Puan</th>\r\n+                <th>Öğrenci Notu</th>\r\n+                <th>Başarı Puanı</th>\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var question in examQuestions)\r\n+            {\r\n+                <tr>\r\n+                    <td>@question.QuestionNumber</td>\r\n+                    @for (int i = 1; i <= maxObjectives; i++)\r\n+                    {\r\n+                        <td>@(question.Objectives.Contains(i) ? \"1\" : \"0\")</td>\r\n+                    }\r\n+                    <td>@question.MaxScore</td>\r\n+                    <td>@question.StudentScore</td>\r\n+                    <td>@CalculateSuccessPoint(question)</td>\r\n+                </tr>\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n+}\r\n+\r\n @code {\r\n+    // Ders verileri\r\n     private List<Lesson> Dersler = new List<Lesson>();\r\n+    private Lesson seciliDers;\r\n     private string selectedLesson;\r\n     private List<LessonObjective> lessonObjectives = new();\r\n+\r\n+    // Sınav Türleri\r\n+    private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n+    private string selectedExamType;\r\n+    private bool isLoading = true;\r\n+\r\n+    // Sınav Soruları\r\n+    private List<ExamQuestion> examQuestions = new();\r\n+    private int maxObjectives = 3; // ÖÇ sayısı\r\n     private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n \r\n-    protected override async Task OnInitializedAsync()\r\n+    // Sabit değerler\r\n+    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n+\r\n+    // Dersin ÖÇ ve PÇ ilişkileri\r\n+    private void LoadLessonObjectives()\r\n     {\r\n-        try\r\n+        lessonObjectives.Clear();\r\n+        if (selectedLesson == \"PH101\")\r\n         {\r\n-            // Dersleri asenkron olarak yükle\r\n-            Dersler = await LessonService.GetLessons();\r\n+            lessonObjectives = new List<LessonObjective>\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n+        };\r\n         }\r\n-        catch (Exception ex)\r\n+        else if (selectedLesson == \"MATH101\")\r\n         {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n+            lessonObjectives = new List<LessonObjective>\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n+        };\r\n         }\r\n     }\r\n \r\n-    private void LoadLessonObjectives()\r\n+    // Sınav verileri\r\n+    private void LoadExamData()\r\n     {\r\n-        lessonObjectives.Clear();\r\n+        examQuestions.Clear();\r\n+        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n+        {\r\n+            examQuestions = new List<ExamQuestion>\r\n+{\r\n+new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n+LessonObjective = \"Ö3\" }\r\n+};\r\n+        }\r\n+    }\r\n \r\n-        // Seçilen derse göre ÖÇ ve PÇ verilerini belirle\r\n-        if (selectedLesson == \"PH101\")\r\n+    // Başarı puanı hesaplama metodu\r\n+    private double CalculateSuccessPoint(ExamQuestion question)\r\n+    {\r\n+        // Seçili dersin AKTS kredisini al\r\n+        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n+        if (lesson == null) return 0;\r\n+\r\n+        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n+        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n+        if (objective == null) return 0;\r\n+\r\n+        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n+        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n+\r\n+        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n+        double B = question.Objectives.Any() ? 1 : 0;\r\n+\r\n+        // C: Değerlendirme Ağırlığı\r\n+        double C = EvaluationWeight;\r\n+\r\n+        // D: AKTS\r\n+        double D = lesson.AKTS / 10.0;\r\n+\r\n+        // E: Öğrencinin aldığı puan\r\n+        double E = question.StudentScore;\r\n+\r\n+        // F: Max Puan / 100\r\n+        double F = question.MaxScore / 100.0;\r\n+\r\n+        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n+        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n+\r\n+        return Math.Round(successPoint, 2);\r\n+    }\r\n+\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n         {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-            {\r\n-                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n-                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n-                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n-            };\r\n+            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n+            Dersler = await LessonService.GetLessons();\r\n+\r\n         }\r\n-        else if (selectedLesson == \"MATH101\")\r\n+        catch (Exception ex)\r\n         {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-            {\r\n-                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n-                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n-                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n-            };\r\n+            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n         }\r\n-        else\r\n+        finally\r\n         {\r\n-            // Seçilen ders için veri yoksa boş bırak\r\n-            lessonObjectives = new();\r\n+            // Yükleme durumu güncelleniyor\r\n+            isLoading = false;\r\n+            StateHasChanged();\r\n         }\r\n     }\r\n+    private async void DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        if (e.Value != null)\r\n+        {\r\n+            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n+            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n+        }\r\n+    }\r\n \r\n     public class LessonObjective\r\n     {\r\n         public string Name { get; set; }\r\n         public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n     }\r\n-}\r\n+\r\n+    public class ExamQuestion\r\n+    {\r\n+        public int QuestionNumber { get; set; }\r\n+        public List<int> Objectives { get; set; }\r\n+        public int MaxScore { get; set; }\r\n+        public int StudentScore { get; set; }\r\n+        public string LessonObjective { get; set; }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734892259382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,227 +19,94 @@\n     </select>\r\n     <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n </div>\r\n \r\n-<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n+<!-- ÖÇ ve PÇ İlişkisi Matrisi -->\r\n @if (lessonObjectives.Any())\r\n {\r\n     <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Program Çıktıları</th>\r\n-                @foreach (var objective in programOutcomes)\r\n-                {\r\n-                    <th>@objective</th>\r\n-                }\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var objective in lessonObjectives)\r\n-            {\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table class=\"table\">\r\n+            <thead>\r\n                 <tr>\r\n-                    <td>@objective.Name</td>\r\n-                    @foreach (var outcome in programOutcomes)\r\n+                    <th>Program Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n                     {\r\n-                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n+                        <th>P@(i)</th>\r\n                     }\r\n                 </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n-}\r\n-\r\n-<!-- Sınav Türü Seçimi -->\r\n-@if (lessonObjectives.Any())\r\n-{\r\n-    <div class=\"selection-form\">\r\n-        <label>Sınav Türü Seçin: </label>\r\n-        <select @bind=\"selectedExamType\">\r\n-            @foreach (var exam in examTypes)\r\n-            {\r\n-                <option value=\"@exam\">@exam</option>\r\n-            }\r\n-        </select>\r\n-        <button @onclick=\"LoadExamData\">Sınav Verilerini Göster</button>\r\n-    </div>\r\n-}\r\n-\r\n-<!-- Sınav Soruları ve ÖÇ İlişkisi Tablosu -->\r\n-@if (examQuestions.Any())\r\n-{\r\n-    <h4>@selectedLesson Dersinin @selectedExamType Sınavı</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Soru No</th>\r\n-                @for (int i = 1; i <= maxObjectives; i++)\r\n+            </thead>\r\n+            <tbody>\r\n+                @for (int i = 0; i < lessonObjectives.Count; i++)\r\n                 {\r\n-                    <th>ÖÇ @i</th>\r\n+                    var objective = lessonObjectives[i];\r\n+                    <tr>\r\n+                        <th>@objective.Name</th>\r\n+                        @for (int j = 1; j <= 11; j++)\r\n+                        {\r\n+                            int rowIndex = i;\r\n+                            int colIndex = j;\r\n+                            string key = $\"P{j}Ö{i+1}\";\r\n+                            <td>\r\n+                                <input type=\"number\"\r\n+                                       value=\"@GetLoPoValue(objective, $\"P{j}\")\"\r\n+                                       @onchange=\"@(e => HandleValueChange(e, rowIndex, colIndex))\"\r\n+                                       min=\"0\"\r\n+                                       max=\"5\" />\r\n+                            </td>\r\n+                        }\r\n+                    </tr>\r\n                 }\r\n-                <th>Maks Puan</th>\r\n-                <th>Öğrenci Notu</th>\r\n-                <th>Başarı Puanı</th>\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var question in examQuestions)\r\n-            {\r\n-                <tr>\r\n-                    <td>@question.QuestionNumber</td>\r\n-                    @for (int i = 1; i <= maxObjectives; i++)\r\n+                <tr class=\"total-row\">\r\n+                    <th>Tüm Ortalamalar</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n                     {\r\n-                        <td>@(question.Objectives.Contains(i) ? \"1\" : \"0\")</td>\r\n+                        <td id=\"total-P@(i)\">@CalculateColumnAverage(i)</td>\r\n                     }\r\n-                    <td>@question.MaxScore</td>\r\n-                    <td>@question.StudentScore</td>\r\n-                    <td>@CalculateSuccessPoint(question)</td>\r\n                 </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n }\r\n \r\n @code {\r\n-    // Ders verileri\r\n-    private List<Lesson> Dersler = new List<Lesson>();\r\n-    private Lesson seciliDers;\r\n-    private string selectedLesson;\r\n-    private List<LessonObjective> lessonObjectives = new();\r\n+    // Mevcut değişkenler ve metotlar aynı kalacak, yeni metotlar eklenecek\r\n \r\n-    // Sınav Türleri\r\n-    private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n-    private string selectedExamType;\r\n-    private bool isLoading = true;\r\n-\r\n-    // Sınav Soruları\r\n-    private List<ExamQuestion> examQuestions = new();\r\n-    private int maxObjectives = 3; // ÖÇ sayısı\r\n-    private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n-\r\n-    // Sabit değerler\r\n-    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n-\r\n-    // Dersin ÖÇ ve PÇ ilişkileri\r\n-    private void LoadLessonObjectives()\r\n+    // ÖÇ-PÇ değerini alma metodu\r\n+    private int GetLoPoValue(LessonObjective objective, string programOutcome)\r\n     {\r\n-        lessonObjectives.Clear();\r\n-        if (selectedLesson == \"PH101\")\r\n-        {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n-        };\r\n-        }\r\n-        else if (selectedLesson == \"MATH101\")\r\n-        {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n-        };\r\n-        }\r\n+        return objective.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0;\r\n     }\r\n \r\n-    // Sınav verileri\r\n-    private void LoadExamData()\r\n+    // Değer değişikliği işleme metodu\r\n+    private void HandleValueChange(ChangeEventArgs e, int rowIndex, int colIndex)\r\n     {\r\n-        examQuestions.Clear();\r\n-        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n+        if (int.TryParse(e.Value.ToString(), out int value))\r\n         {\r\n-            examQuestions = new List<ExamQuestion>\r\n-{\r\n-new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n-LessonObjective = \"Ö3\" }\r\n-};\r\n-        }\r\n-    }\r\n+            string programOutcome = $\"P{colIndex}\";\r\n+            var objective = lessonObjectives[rowIndex];\r\n \r\n-    // Başarı puanı hesaplama metodu\r\n-    private double CalculateSuccessPoint(ExamQuestion question)\r\n-    {\r\n-        // Seçili dersin AKTS kredisini al\r\n-        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n-        if (lesson == null) return 0;\r\n+            if (objective.RelatedOutcomes.ContainsKey(programOutcome))\r\n+            {\r\n+                objective.RelatedOutcomes[programOutcome] = value;\r\n+            }\r\n+            else\r\n+            {\r\n+                objective.RelatedOutcomes.Add(programOutcome, value);\r\n+            }\r\n \r\n-        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n-        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n-        if (objective == null) return 0;\r\n-\r\n-        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n-        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n-\r\n-        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n-        double B = question.Objectives.Any() ? 1 : 0;\r\n-\r\n-        // C: Değerlendirme Ağırlığı\r\n-        double C = EvaluationWeight;\r\n-\r\n-        // D: AKTS\r\n-        double D = lesson.AKTS / 10.0;\r\n-\r\n-        // E: Öğrencinin aldığı puan\r\n-        double E = question.StudentScore;\r\n-\r\n-        // F: Max Puan / 100\r\n-        double F = question.MaxScore / 100.0;\r\n-\r\n-        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n-        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n-\r\n-        return Math.Round(successPoint, 2);\r\n-    }\r\n-\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n-            Dersler = await LessonService.GetLessons();\r\n-\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n-        }\r\n-        finally\r\n-        {\r\n-            // Yükleme durumu güncelleniyor\r\n-            isLoading = false;\r\n+            // Ortalamaları güncelle\r\n             StateHasChanged();\r\n         }\r\n     }\r\n-    private async void DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        if (e.Value != null)\r\n-        {\r\n-            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n-            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-        }\r\n-    }\r\n \r\n-    public class LessonObjective\r\n+    // Sütun ortalamasını hesaplama metodu\r\n+    private double CalculateColumnAverage(int colIndex)\r\n     {\r\n-        public string Name { get; set; }\r\n-        public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n-    }\r\n+        string programOutcome = $\"P{colIndex}\";\r\n+        var values = lessonObjectives\r\n+            .Select(o => o.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0)\r\n+            .ToList();\r\n \r\n-    public class ExamQuestion\r\n-    {\r\n-        public int QuestionNumber { get; set; }\r\n-        public List<int> Objectives { get; set; }\r\n-        public int MaxScore { get; set; }\r\n-        public int StudentScore { get; set; }\r\n-        public string LessonObjective { get; set; }\r\n+        return values.Any() ? Math.Round(values.Average(), 2) : 0;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734892270043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,94 +19,227 @@\n     </select>\r\n     <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n </div>\r\n \r\n-<!-- ÖÇ ve PÇ İlişkisi Matrisi -->\r\n+<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n @if (lessonObjectives.Any())\r\n {\r\n     <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table class=\"table\">\r\n-            <thead>\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Program Çıktıları</th>\r\n+                @foreach (var objective in programOutcomes)\r\n+                {\r\n+                    <th>@objective</th>\r\n+                }\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var objective in lessonObjectives)\r\n+            {\r\n                 <tr>\r\n-                    <th>Program Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n+                    <td>@objective.Name</td>\r\n+                    @foreach (var outcome in programOutcomes)\r\n                     {\r\n-                        <th>P@(i)</th>\r\n+                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n                     }\r\n                 </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @for (int i = 0; i < lessonObjectives.Count; i++)\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n+}\r\n+\r\n+<!-- Sınav Türü Seçimi -->\r\n+@if (lessonObjectives.Any())\r\n+{\r\n+    <div class=\"selection-form\">\r\n+        <label>Sınav Türü Seçin: </label>\r\n+        <select @bind=\"selectedExamType\">\r\n+            @foreach (var exam in examTypes)\r\n+            {\r\n+                <option value=\"@exam\">@exam</option>\r\n+            }\r\n+        </select>\r\n+        <button @onclick=\"LoadExamData\">Sınav Verilerini Göster</button>\r\n+    </div>\r\n+}\r\n+\r\n+<!-- Sınav Soruları ve ÖÇ İlişkisi Tablosu -->\r\n+@if (examQuestions.Any())\r\n+{\r\n+    <h4>@selectedLesson Dersinin @selectedExamType Sınavı</h4>\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Soru No</th>\r\n+                @for (int i = 1; i <= maxObjectives; i++)\r\n                 {\r\n-                    var objective = lessonObjectives[i];\r\n-                    <tr>\r\n-                        <th>@objective.Name</th>\r\n-                        @for (int j = 1; j <= 11; j++)\r\n-                        {\r\n-                            int rowIndex = i;\r\n-                            int colIndex = j;\r\n-                            string key = $\"P{j}Ö{i+1}\";\r\n-                            <td>\r\n-                                <input type=\"number\"\r\n-                                       value=\"@GetLoPoValue(objective, $\"P{j}\")\"\r\n-                                       @onchange=\"@(e => HandleValueChange(e, rowIndex, colIndex))\"\r\n-                                       min=\"0\"\r\n-                                       max=\"5\" />\r\n-                            </td>\r\n-                        }\r\n-                    </tr>\r\n+                    <th>ÖÇ @i</th>\r\n                 }\r\n-                <tr class=\"total-row\">\r\n-                    <th>Tüm Ortalamalar</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n+                <th>Maks Puan</th>\r\n+                <th>Öğrenci Notu</th>\r\n+                <th>Başarı Puanı</th>\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var question in examQuestions)\r\n+            {\r\n+                <tr>\r\n+                    <td>@question.QuestionNumber</td>\r\n+                    @for (int i = 1; i <= maxObjectives; i++)\r\n                     {\r\n-                        <td id=\"total-P@(i)\">@CalculateColumnAverage(i)</td>\r\n+                        <td>@(question.Objectives.Contains(i) ? \"1\" : \"0\")</td>\r\n                     }\r\n+                    <td>@question.MaxScore</td>\r\n+                    <td>@question.StudentScore</td>\r\n+                    <td>@CalculateSuccessPoint(question)</td>\r\n                 </tr>\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n }\r\n \r\n @code {\r\n-    // Mevcut değişkenler ve metotlar aynı kalacak, yeni metotlar eklenecek\r\n+    // Ders verileri\r\n+    private List<Lesson> Dersler = new List<Lesson>();\r\n+    private Lesson seciliDers;\r\n+    private string selectedLesson;\r\n+    private List<LessonObjective> lessonObjectives = new();\r\n \r\n-    // ÖÇ-PÇ değerini alma metodu\r\n-    private int GetLoPoValue(LessonObjective objective, string programOutcome)\r\n+    // Sınav Türleri\r\n+    private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n+    private string selectedExamType;\r\n+    private bool isLoading = true;\r\n+\r\n+    // Sınav Soruları\r\n+    private List<ExamQuestion> examQuestions = new();\r\n+    private int maxObjectives = 3; // ÖÇ sayısı\r\n+    private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n+\r\n+    // Sabit değerler\r\n+    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n+\r\n+    // Dersin ÖÇ ve PÇ ilişkileri\r\n+    private void LoadLessonObjectives()\r\n     {\r\n-        return objective.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0;\r\n+        lessonObjectives.Clear();\r\n+        if (selectedLesson == \"PH101\")\r\n+        {\r\n+            lessonObjectives = new List<LessonObjective>\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n+        };\r\n+        }\r\n+        else if (selectedLesson == \"MATH101\")\r\n+        {\r\n+            lessonObjectives = new List<LessonObjective>\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n+        };\r\n+        }\r\n     }\r\n \r\n-    // Değer değişikliği işleme metodu\r\n-    private void HandleValueChange(ChangeEventArgs e, int rowIndex, int colIndex)\r\n+    // Sınav verileri\r\n+    private void LoadExamData()\r\n     {\r\n-        if (int.TryParse(e.Value.ToString(), out int value))\r\n+        examQuestions.Clear();\r\n+        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n         {\r\n-            string programOutcome = $\"P{colIndex}\";\r\n-            var objective = lessonObjectives[rowIndex];\r\n+            examQuestions = new List<ExamQuestion>\r\n+{\r\n+new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n+LessonObjective = \"Ö3\" }\r\n+};\r\n+        }\r\n+    }\r\n \r\n-            if (objective.RelatedOutcomes.ContainsKey(programOutcome))\r\n-            {\r\n-                objective.RelatedOutcomes[programOutcome] = value;\r\n-            }\r\n-            else\r\n-            {\r\n-                objective.RelatedOutcomes.Add(programOutcome, value);\r\n-            }\r\n+    // Başarı puanı hesaplama metodu\r\n+    private double CalculateSuccessPoint(ExamQuestion question)\r\n+    {\r\n+        // Seçili dersin AKTS kredisini al\r\n+        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n+        if (lesson == null) return 0;\r\n \r\n-            // Ortalamaları güncelle\r\n+        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n+        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n+        if (objective == null) return 0;\r\n+\r\n+        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n+        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n+\r\n+        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n+        double B = question.Objectives.Any() ? 1 : 0;\r\n+\r\n+        // C: Değerlendirme Ağırlığı\r\n+        double C = EvaluationWeight;\r\n+\r\n+        // D: AKTS\r\n+        double D = lesson.AKTS / 10.0;\r\n+\r\n+        // E: Öğrencinin aldığı puan\r\n+        double E = question.StudentScore;\r\n+\r\n+        // F: Max Puan / 100\r\n+        double F = question.MaxScore / 100.0;\r\n+\r\n+        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n+        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n+\r\n+        return Math.Round(successPoint, 2);\r\n+    }\r\n+\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n+            Dersler = await LessonService.GetLessons();\r\n+\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n+        }\r\n+        finally\r\n+        {\r\n+            // Yükleme durumu güncelleniyor\r\n+            isLoading = false;\r\n             StateHasChanged();\r\n         }\r\n     }\r\n+    private async void DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        if (e.Value != null)\r\n+        {\r\n+            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n+            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n+        }\r\n+    }\r\n \r\n-    // Sütun ortalamasını hesaplama metodu\r\n-    private double CalculateColumnAverage(int colIndex)\r\n+    public class LessonObjective\r\n     {\r\n-        string programOutcome = $\"P{colIndex}\";\r\n-        var values = lessonObjectives\r\n-            .Select(o => o.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0)\r\n-            .ToList();\r\n+        public string Name { get; set; }\r\n+        public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n+    }\r\n \r\n-        return values.Any() ? Math.Round(values.Average(), 2) : 0;\r\n+    public class ExamQuestion\r\n+    {\r\n+        public int QuestionNumber { get; set; }\r\n+        public List<int> Objectives { get; set; }\r\n+        public int MaxScore { get; set; }\r\n+        public int StudentScore { get; set; }\r\n+        public string LessonObjective { get; set; }\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734892331955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,35 +19,51 @@\n     </select>\r\n     <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n </div>\r\n \r\n-<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n+<!-- ÖÇ ve PÇ İlişkisi Matrisi -->\r\n @if (lessonObjectives.Any())\r\n {\r\n     <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Program Çıktıları</th>\r\n-                @foreach (var objective in programOutcomes)\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table class=\"table\">\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Program Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n+                    {\r\n+                        <th>P@(i)</th>\r\n+                    }\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var objective in lessonObjectives)\r\n                 {\r\n-                    <th>@objective</th>\r\n+                    <tr>\r\n+                        <td>@objective.Name</td>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var programOutcome = $\"P{i}\";\r\n+                            <td>\r\n+                                <input type=\"number\"\r\n+                                       value=\"@(objective.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0)\"\r\n+                                       @onchange=\"@(e => UpdateOutcomeValue(e, objective, programOutcome))\"\r\n+                                       min=\"0\"\r\n+                                       max=\"5\" />\r\n+                            </td>\r\n+                        }\r\n+                    </tr>\r\n                 }\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var objective in lessonObjectives)\r\n-            {\r\n-                <tr>\r\n-                    <td>@objective.Name</td>\r\n-                    @foreach (var outcome in programOutcomes)\r\n+                <tr class=\"total-row\">\r\n+                    <th>Tüm Ortalamalar</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n                     {\r\n-                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n+                        <td>@CalculateColumnAverage($\"P{i}\")</td>\r\n                     }\r\n                 </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n }\r\n \r\n <!-- Sınav Türü Seçimi -->\r\n @if (lessonObjectives.Any())\r\n@@ -99,134 +115,89 @@\n     </table>\r\n }\r\n \r\n @code {\r\n-    // Ders verileri\r\n+    // Mevcut değişkenler aynı kalacak\r\n     private List<Lesson> Dersler = new List<Lesson>();\r\n     private Lesson seciliDers;\r\n     private string selectedLesson;\r\n     private List<LessonObjective> lessonObjectives = new();\r\n-\r\n-    // Sınav Türleri\r\n     private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n     private string selectedExamType;\r\n     private bool isLoading = true;\r\n-\r\n-    // Sınav Soruları\r\n     private List<ExamQuestion> examQuestions = new();\r\n-    private int maxObjectives = 3; // ÖÇ sayısı\r\n+    private int maxObjectives = 3;\r\n     private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n+    private const double EvaluationWeight = 1.0;\r\n \r\n-    // Sabit değerler\r\n-    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n+    // Yeni metotlar\r\n+    private void UpdateOutcomeValue(ChangeEventArgs e, LessonObjective objective, string programOutcome)\r\n+    {\r\n+        if (int.TryParse(e.Value.ToString(), out int value))\r\n+        {\r\n+            if (objective.RelatedOutcomes.ContainsKey(programOutcome))\r\n+            {\r\n+                objective.RelatedOutcomes[programOutcome] = value;\r\n+            }\r\n+            else\r\n+            {\r\n+                objective.RelatedOutcomes.Add(programOutcome, value);\r\n+            }\r\n+            StateHasChanged();\r\n+        }\r\n+    }\r\n \r\n-    // Dersin ÖÇ ve PÇ ilişkileri\r\n+    private double CalculateColumnAverage(string programOutcome)\r\n+    {\r\n+        var values = lessonObjectives\r\n+            .Select(o => o.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0)\r\n+            .ToList();\r\n+\r\n+        return values.Any() ? Math.Round(values.Average(), 2) : 0;\r\n+    }\r\n+\r\n+    // Mevcut metotlar aynı kalacak\r\n     private void LoadLessonObjectives()\r\n     {\r\n         lessonObjectives.Clear();\r\n         if (selectedLesson == \"PH101\")\r\n         {\r\n             lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n-        };\r\n+            {\r\n+                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n+                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n+                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n+            };\r\n         }\r\n         else if (selectedLesson == \"MATH101\")\r\n         {\r\n             lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n-        };\r\n+            {\r\n+                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n+                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n+                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n+            };\r\n         }\r\n     }\r\n \r\n-    // Sınav verileri\r\n     private void LoadExamData()\r\n     {\r\n-        examQuestions.Clear();\r\n-        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n-        {\r\n-            examQuestions = new List<ExamQuestion>\r\n-{\r\n-new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n-LessonObjective = \"Ö3\" }\r\n-};\r\n-        }\r\n+        // Mevcut implementasyon\r\n     }\r\n \r\n-    // Başarı puanı hesaplama metodu\r\n     private double CalculateSuccessPoint(ExamQuestion question)\r\n     {\r\n-        // Seçili dersin AKTS kredisini al\r\n-        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n-        if (lesson == null) return 0;\r\n-\r\n-        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n-        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n-        if (objective == null) return 0;\r\n-\r\n-        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n-        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n-\r\n-        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n-        double B = question.Objectives.Any() ? 1 : 0;\r\n-\r\n-        // C: Değerlendirme Ağırlığı\r\n-        double C = EvaluationWeight;\r\n-\r\n-        // D: AKTS\r\n-        double D = lesson.AKTS / 10.0;\r\n-\r\n-        // E: Öğrencinin aldığı puan\r\n-        double E = question.StudentScore;\r\n-\r\n-        // F: Max Puan / 100\r\n-        double F = question.MaxScore / 100.0;\r\n-\r\n-        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n-        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n-\r\n-        return Math.Round(successPoint, 2);\r\n+        // Mevcut implementasyon\r\n     }\r\n \r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n-        try\r\n-        {\r\n-            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n-            Dersler = await LessonService.GetLessons();\r\n+        // Mevcut implementasyon\r\n+    }\r\n \r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n-        }\r\n-        finally\r\n-        {\r\n-            // Yükleme durumu güncelleniyor\r\n-            isLoading = false;\r\n-            StateHasChanged();\r\n-        }\r\n-    }\r\n     private async void DersSecildi(ChangeEventArgs e)\r\n     {\r\n-        if (e.Value != null)\r\n-        {\r\n-            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n-            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-        }\r\n+        // Mevcut implementasyon\r\n     }\r\n \r\n     public class LessonObjective\r\n     {\r\n"
                },
                {
                    "date": 1734892361044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,51 +19,35 @@\n     </select>\r\n     <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n </div>\r\n \r\n-<!-- ÖÇ ve PÇ İlişkisi Matrisi -->\r\n+<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n @if (lessonObjectives.Any())\r\n {\r\n     <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table class=\"table\">\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Program Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n-                    {\r\n-                        <th>P@(i)</th>\r\n-                    }\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var objective in lessonObjectives)\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Program Çıktıları</th>\r\n+                @foreach (var objective in programOutcomes)\r\n                 {\r\n-                    <tr>\r\n-                        <td>@objective.Name</td>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var programOutcome = $\"P{i}\";\r\n-                            <td>\r\n-                                <input type=\"number\"\r\n-                                       value=\"@(objective.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0)\"\r\n-                                       @onchange=\"@(e => UpdateOutcomeValue(e, objective, programOutcome))\"\r\n-                                       min=\"0\"\r\n-                                       max=\"5\" />\r\n-                            </td>\r\n-                        }\r\n-                    </tr>\r\n+                    <th>@objective</th>\r\n                 }\r\n-                <tr class=\"total-row\">\r\n-                    <th>Tüm Ortalamalar</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var objective in lessonObjectives)\r\n+            {\r\n+                <tr>\r\n+                    <td>@objective.Name</td>\r\n+                    @foreach (var outcome in programOutcomes)\r\n                     {\r\n-                        <td>@CalculateColumnAverage($\"P{i}\")</td>\r\n+                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n                     }\r\n                 </tr>\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n }\r\n \r\n <!-- Sınav Türü Seçimi -->\r\n @if (lessonObjectives.Any())\r\n@@ -115,89 +99,134 @@\n     </table>\r\n }\r\n \r\n @code {\r\n-    // Mevcut değişkenler aynı kalacak\r\n+    // Ders verileri\r\n     private List<Lesson> Dersler = new List<Lesson>();\r\n     private Lesson seciliDers;\r\n     private string selectedLesson;\r\n     private List<LessonObjective> lessonObjectives = new();\r\n+\r\n+    // Sınav Türleri\r\n     private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n     private string selectedExamType;\r\n     private bool isLoading = true;\r\n+\r\n+    // Sınav Soruları\r\n     private List<ExamQuestion> examQuestions = new();\r\n-    private int maxObjectives = 3;\r\n+    private int maxObjectives = 3; // ÖÇ sayısı\r\n     private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n-    private const double EvaluationWeight = 1.0;\r\n \r\n-    // Yeni metotlar\r\n-    private void UpdateOutcomeValue(ChangeEventArgs e, LessonObjective objective, string programOutcome)\r\n-    {\r\n-        if (int.TryParse(e.Value.ToString(), out int value))\r\n-        {\r\n-            if (objective.RelatedOutcomes.ContainsKey(programOutcome))\r\n-            {\r\n-                objective.RelatedOutcomes[programOutcome] = value;\r\n-            }\r\n-            else\r\n-            {\r\n-                objective.RelatedOutcomes.Add(programOutcome, value);\r\n-            }\r\n-            StateHasChanged();\r\n-        }\r\n-    }\r\n+    // Sabit değerler\r\n+    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n \r\n-    private double CalculateColumnAverage(string programOutcome)\r\n-    {\r\n-        var values = lessonObjectives\r\n-            .Select(o => o.RelatedOutcomes.TryGetValue(programOutcome, out int value) ? value : 0)\r\n-            .ToList();\r\n-\r\n-        return values.Any() ? Math.Round(values.Average(), 2) : 0;\r\n-    }\r\n-\r\n-    // Mevcut metotlar aynı kalacak\r\n+    // Dersin ÖÇ ve PÇ ilişkileri\r\n     private void LoadLessonObjectives()\r\n     {\r\n         lessonObjectives.Clear();\r\n         if (selectedLesson == \"PH101\")\r\n         {\r\n             lessonObjectives = new List<LessonObjective>\r\n-            {\r\n-                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n-                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n-                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n-            };\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n+        };\r\n         }\r\n         else if (selectedLesson == \"MATH101\")\r\n         {\r\n             lessonObjectives = new List<LessonObjective>\r\n-            {\r\n-                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n-                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n-                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n-            };\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n+        };\r\n         }\r\n     }\r\n \r\n+    // Sınav verileri\r\n     private void LoadExamData()\r\n     {\r\n-        // Mevcut implementasyon\r\n+        examQuestions.Clear();\r\n+        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n+        {\r\n+            examQuestions = new List<ExamQuestion>\r\n+{\r\n+new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n+LessonObjective = \"Ö3\" }\r\n+};\r\n+        }\r\n     }\r\n \r\n+    // Başarı puanı hesaplama metodu\r\n     private double CalculateSuccessPoint(ExamQuestion question)\r\n     {\r\n-        // Mevcut implementasyon\r\n+        // Seçili dersin AKTS kredisini al\r\n+        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n+        if (lesson == null) return 0;\r\n+\r\n+        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n+        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n+        if (objective == null) return 0;\r\n+\r\n+        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n+        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n+\r\n+        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n+        double B = question.Objectives.Any() ? 1 : 0;\r\n+\r\n+        // C: Değerlendirme Ağırlığı\r\n+        double C = EvaluationWeight;\r\n+\r\n+        // D: AKTS\r\n+        double D = lesson.AKTS / 10.0;\r\n+\r\n+        // E: Öğrencinin aldığı puan\r\n+        double E = question.StudentScore;\r\n+\r\n+        // F: Max Puan / 100\r\n+        double F = question.MaxScore / 100.0;\r\n+\r\n+        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n+        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n+\r\n+        return Math.Round(successPoint, 2);\r\n     }\r\n \r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n-        // Mevcut implementasyon\r\n+        try\r\n+        {\r\n+            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n+            Dersler = await LessonService.GetLessons();\r\n+\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n+        }\r\n+        finally\r\n+        {\r\n+            // Yükleme durumu güncelleniyor\r\n+            isLoading = false;\r\n+            StateHasChanged();\r\n+        }\r\n     }\r\n-\r\n     private async void DersSecildi(ChangeEventArgs e)\r\n     {\r\n-        // Mevcut implementasyon\r\n+        if (e.Value != null)\r\n+        {\r\n+            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n+            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n+        }\r\n     }\r\n \r\n     public class LessonObjective\r\n     {\r\n"
                },
                {
                    "date": 1734892944081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n @page \"/exam-analysis\"\r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n \r\n <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n \r\n <h3>Ders Analizi ve Değerlendirme</h3>\r\n@@ -16,230 +17,98 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n+    <button @onclick=\"LoadLoPoMatrix\">LoPo Matrisi Göster</button>\r\n </div>\r\n \r\n-<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n-@if (lessonObjectives.Any())\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n {\r\n-    <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Program Çıktıları</th>\r\n-                @foreach (var objective in programOutcomes)\r\n-                {\r\n-                    <th>@objective</th>\r\n-                }\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var objective in lessonObjectives)\r\n-            {\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n                 <tr>\r\n-                    <td>@objective.Name</td>\r\n-                    @foreach (var outcome in programOutcomes)\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n                     {\r\n-                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n+                        <th>P@(i)</th>\r\n                     }\r\n                 </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n-}\r\n-\r\n-<!-- Sınav Türü Seçimi -->\r\n-@if (lessonObjectives.Any())\r\n-{\r\n-    <div class=\"selection-form\">\r\n-        <label>Sınav Türü Seçin: </label>\r\n-        <select @bind=\"selectedExamType\">\r\n-            @foreach (var exam in examTypes)\r\n-            {\r\n-                <option value=\"@exam\">@exam</option>\r\n-            }\r\n-        </select>\r\n-        <button @onclick=\"LoadExamData\">Sınav Verilerini Göster</button>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n     </div>\r\n }\r\n-\r\n-<!-- Sınav Soruları ve ÖÇ İlişkisi Tablosu -->\r\n-@if (examQuestions.Any())\r\n+else\r\n {\r\n-    <h4>@selectedLesson Dersinin @selectedExamType Sınavı</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Soru No</th>\r\n-                @for (int i = 1; i <= maxObjectives; i++)\r\n-                {\r\n-                    <th>ÖÇ @i</th>\r\n-                }\r\n-                <th>Maks Puan</th>\r\n-                <th>Öğrenci Notu</th>\r\n-                <th>Başarı Puanı</th>\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var question in examQuestions)\r\n-            {\r\n-                <tr>\r\n-                    <td>@question.QuestionNumber</td>\r\n-                    @for (int i = 1; i <= maxObjectives; i++)\r\n-                    {\r\n-                        <td>@(question.Objectives.Contains(i) ? \"1\" : \"0\")</td>\r\n-                    }\r\n-                    <td>@question.MaxScore</td>\r\n-                    <td>@question.StudentScore</td>\r\n-                    <td>@CalculateSuccessPoint(question)</td>\r\n-                </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n }\r\n \r\n @code {\r\n-    // Ders verileri\r\n-    private List<Lesson> Dersler = new List<Lesson>();\r\n-    private Lesson seciliDers;\r\n-    private string selectedLesson;\r\n-    private List<LessonObjective> lessonObjectives = new();\r\n+    private List<Lesson> Dersler { get; set; }\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n \r\n-    // Sınav Türleri\r\n-    private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n-    private string selectedExamType;\r\n-    private bool isLoading = true;\r\n-\r\n-    // Sınav Soruları\r\n-    private List<ExamQuestion> examQuestions = new();\r\n-    private int maxObjectives = 3; // ÖÇ sayısı\r\n-    private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n-\r\n-    // Sabit değerler\r\n-    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n-\r\n-    // Dersin ÖÇ ve PÇ ilişkileri\r\n-    private void LoadLessonObjectives()\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n     {\r\n-        lessonObjectives.Clear();\r\n-        if (selectedLesson == \"PH101\")\r\n+        var selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n         {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n-        };\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n         }\r\n-        else if (selectedLesson == \"MATH101\")\r\n-        {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n-        };\r\n-        }\r\n     }\r\n \r\n-    // Sınav verileri\r\n-    private void LoadExamData()\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n     {\r\n-        examQuestions.Clear();\r\n-        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n+        try\r\n         {\r\n-            examQuestions = new List<ExamQuestion>\r\n-{\r\n-new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n-LessonObjective = \"Ö3\" }\r\n-};\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n         }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n     }\r\n \r\n-    // Başarı puanı hesaplama metodu\r\n-    private double CalculateSuccessPoint(ExamQuestion question)\r\n-    {\r\n-        // Seçili dersin AKTS kredisini al\r\n-        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n-        if (lesson == null) return 0;\r\n-\r\n-        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n-        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n-        if (objective == null) return 0;\r\n-\r\n-        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n-        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n-\r\n-        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n-        double B = question.Objectives.Any() ? 1 : 0;\r\n-\r\n-        // C: Değerlendirme Ağırlığı\r\n-        double C = EvaluationWeight;\r\n-\r\n-        // D: AKTS\r\n\\ No newline at end of file\n-        double D = lesson.AKTS / 10.0;\r\n-\r\n-        // E: Öğrencinin aldığı puan\r\n-        double E = question.StudentScore;\r\n-\r\n-        // F: Max Puan / 100\r\n-        double F = question.MaxScore / 100.0;\r\n-\r\n-        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n-        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n-\r\n-        return Math.Round(successPoint, 2);\r\n-    }\r\n-\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n-            Dersler = await LessonService.GetLessons();\r\n-\r\n+            Dersler = await LessonService.GetAllLessons();\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n         }\r\n-        finally\r\n-        {\r\n-            // Yükleme durumu güncelleniyor\r\n-            isLoading = false;\r\n-            StateHasChanged();\r\n-        }\r\n     }\r\n-    private async void DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        if (e.Value != null)\r\n-        {\r\n-            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n-            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-        }\r\n-    }\r\n-\r\n-    public class LessonObjective\r\n-    {\r\n-        public string Name { get; set; }\r\n-        public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n-    }\r\n-\r\n-    public class ExamQuestion\r\n-    {\r\n-        public int QuestionNumber { get; set; }\r\n-        public List<int> Objectives { get; set; }\r\n-        public int MaxScore { get; set; }\r\n-        public int StudentScore { get; set; }\r\n-        public string LessonObjective { get; set; }\r\n-    }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1734892957395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n @page \"/exam-analysis\"\r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n-@inject NavigationManager NavigationManager\r\n \r\n <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n \r\n <h3>Ders Analizi ve Değerlendirme</h3>\r\n@@ -17,98 +16,230 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"LoadLoPoMatrix\">LoPo Matrisi Göster</button>\r\n+    <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n </div>\r\n \r\n-<!-- LoPo Matrisi Tablosu -->\r\n-@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n+<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n+@if (lessonObjectives.Any())\r\n {\r\n-    <h4>LoPo Matrisi</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table>\r\n-            <thead>\r\n+    <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Program Çıktıları</th>\r\n+                @foreach (var objective in programOutcomes)\r\n+                {\r\n+                    <th>@objective</th>\r\n+                }\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var objective in lessonObjectives)\r\n+            {\r\n                 <tr>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n+                    <td>@objective.Name</td>\r\n+                    @foreach (var outcome in programOutcomes)\r\n                     {\r\n-                        <th>P@(i)</th>\r\n+                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n                     }\r\n                 </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    <tr>\r\n-                        <th>@outcome.Description</th>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var key = $\"P{i}Ö{outcome.Id}\";\r\n-                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n-                        }\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n+}\r\n+\r\n+<!-- Sınav Türü Seçimi -->\r\n+@if (lessonObjectives.Any())\r\n+{\r\n+    <div class=\"selection-form\">\r\n+        <label>Sınav Türü Seçin: </label>\r\n+        <select @bind=\"selectedExamType\">\r\n+            @foreach (var exam in examTypes)\r\n+            {\r\n+                <option value=\"@exam\">@exam</option>\r\n+            }\r\n+        </select>\r\n+        <button @onclick=\"LoadExamData\">Sınav Verilerini Göster</button>\r\n     </div>\r\n }\r\n-else\r\n+\r\n+<!-- Sınav Soruları ve ÖÇ İlişkisi Tablosu -->\r\n+@if (examQuestions.Any())\r\n {\r\n-    <p>LoPo matrisi verileri mevcut değil.</p>\r\n+    <h4>@selectedLesson Dersinin @selectedExamType Sınavı</h4>\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Soru No</th>\r\n+                @for (int i = 1; i <= maxObjectives; i++)\r\n+                {\r\n+                    <th>ÖÇ @i</th>\r\n+                }\r\n+                <th>Maks Puan</th>\r\n+                <th>Öğrenci Notu</th>\r\n+                <th>Başarı Puanı</th>\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var question in examQuestions)\r\n+            {\r\n+                <tr>\r\n+                    <td>@question.QuestionNumber</td>\r\n+                    @for (int i = 1; i <= maxObjectives; i++)\r\n+                    {\r\n+                        <td>@(question.Objectives.Contains(i) ? \"1\" : \"0\")</td>\r\n+                    }\r\n+                    <td>@question.MaxScore</td>\r\n+                    <td>@question.StudentScore</td>\r\n+                    <td>@CalculateSuccessPoint(question)</td>\r\n+                </tr>\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n }\r\n \r\n @code {\r\n-    private List<Lesson> Dersler { get; set; }\r\n-    private List<LearningOutcome> loPoMatrix = new();\r\n-    private Dictionary<string, int> loPoValues = new();\r\n+    // Ders verileri\r\n+    private List<Lesson> Dersler = new List<Lesson>();\r\n+    private Lesson seciliDers;\r\n+    private string selectedLesson;\r\n+    private List<LessonObjective> lessonObjectives = new();\r\n \r\n-    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n-    private async Task DersSecildi(ChangeEventArgs e)\r\n+    // Sınav Türleri\r\n+    private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n+    private string selectedExamType;\r\n+    private bool isLoading = true;\r\n+\r\n+    // Sınav Soruları\r\n+    private List<ExamQuestion> examQuestions = new();\r\n+    private int maxObjectives = 3; // ÖÇ sayısı\r\n+    private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n+\r\n+    // Sabit değerler\r\n+    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n+\r\n+    // Dersin ÖÇ ve PÇ ilişkileri\r\n+    private void LoadLessonObjectives()\r\n     {\r\n-        var selectedCourseCode = e.Value?.ToString();\r\n-        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n+        lessonObjectives.Clear();\r\n+        if (selectedLesson == \"PH101\")\r\n         {\r\n-            await LoadLoPoMatrix(selectedCourseCode);\r\n+            lessonObjectives = new List<LessonObjective>\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n+        };\r\n         }\r\n+        else if (selectedLesson == \"MATH101\")\r\n+        {\r\n+            lessonObjectives = new List<LessonObjective>\r\n+        {\r\n+        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n+        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n+        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n+        };\r\n+        }\r\n     }\r\n \r\n-    // LoPo Matrisi verilerini yükle\r\n-    private async Task LoadLoPoMatrix(string courseCode)\r\n+    // Sınav verileri\r\n+    private void LoadExamData()\r\n     {\r\n-        try\r\n+        examQuestions.Clear();\r\n+        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n         {\r\n-            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n-            if (lesson != null)\r\n-            {\r\n-                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n-\r\n-                // LoPoRelations verilerini yükle\r\n-                foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    foreach (var relation in outcome.LoPoRelations)\r\n-                    {\r\n-                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n-                        loPoValues[key] = relation.Score;\r\n-                    }\r\n-                }\r\n-            }\r\n+            examQuestions = new List<ExamQuestion>\r\n+{\r\n+new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n+LessonObjective = \"Ö1\" },\r\n+new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n+LessonObjective = \"Ö2\" },\r\n+new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n+LessonObjective = \"Ö3\" }\r\n+};\r\n         }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n     }\r\n \r\n-    // Sayfa ilk yüklendiğinde dersleri getir\r\n+    // Başarı puanı hesaplama metodu\r\n+    private double CalculateSuccessPoint(ExamQuestion question)\r\n+    {\r\n+        // Seçili dersin AKTS kredisini al\r\n+        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n+        if (lesson == null) return 0;\r\n+\r\n+        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n+        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n+        if (objective == null) return 0;\r\n+\r\n+        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n+        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n+\r\n+        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n+        double B = question.Objectives.Any() ? 1 : 0;\r\n+\r\n+        // C: Değerlendirme Ağırlığı\r\n+        double C = EvaluationWeight;\r\n+\r\n+        // D: AKTS\r\n+        double D = lesson.AKTS / 10.0;\r\n+\r\n+        // E: Öğrencinin aldığı puan\r\n+        double E = question.StudentScore;\r\n+\r\n+        // F: Max Puan / 100\r\n+        double F = question.MaxScore / 100.0;\r\n+\r\n+        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n+        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n+\r\n+        return Math.Round(successPoint, 2);\r\n+    }\r\n+\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            Dersler = await LessonService.GetAllLessons();\r\n+            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n+            Dersler = await LessonService.GetLessons();\r\n+\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n-            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n+            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n         }\r\n+        finally\r\n+        {\r\n+            // Yükleme durumu güncelleniyor\r\n+            isLoading = false;\r\n+            StateHasChanged();\r\n+        }\r\n     }\r\n-}\r\n+    private async void DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        if (e.Value != null)\r\n+        {\r\n+            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n+            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n+        }\r\n+    }\r\n+\r\n+    public class LessonObjective\r\n+    {\r\n+        public string Name { get; set; }\r\n+        public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n+    }\r\n+\r\n+    public class ExamQuestion\r\n+    {\r\n+        public int QuestionNumber { get; set; }\r\n+        public List<int> Objectives { get; set; }\r\n+        public int MaxScore { get; set; }\r\n+        public int StudentScore { get; set; }\r\n+        public string LessonObjective { get; set; }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734892971925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n @page \"/exam-analysis\"\r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n \r\n <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n \r\n <h3>Ders Analizi ve Değerlendirme</h3>\r\n@@ -16,230 +17,98 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n+    <button @onclick=\"LoadLoPoMatrix\">LoPo Matrisi Göster</button>\r\n </div>\r\n \r\n-<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n-@if (lessonObjectives.Any())\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n {\r\n-    <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Program Çıktıları</th>\r\n-                @foreach (var objective in programOutcomes)\r\n-                {\r\n-                    <th>@objective</th>\r\n-                }\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var objective in lessonObjectives)\r\n-            {\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n                 <tr>\r\n-                    <td>@objective.Name</td>\r\n-                    @foreach (var outcome in programOutcomes)\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n                     {\r\n-                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n+                        <th>P@(i)</th>\r\n                     }\r\n                 </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n-}\r\n-\r\n-<!-- Sınav Türü Seçimi -->\r\n-@if (lessonObjectives.Any())\r\n-{\r\n-    <div class=\"selection-form\">\r\n-        <label>Sınav Türü Seçin: </label>\r\n-        <select @bind=\"selectedExamType\">\r\n-            @foreach (var exam in examTypes)\r\n-            {\r\n-                <option value=\"@exam\">@exam</option>\r\n-            }\r\n-        </select>\r\n-        <button @onclick=\"LoadExamData\">Sınav Verilerini Göster</button>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n     </div>\r\n }\r\n-\r\n-<!-- Sınav Soruları ve ÖÇ İlişkisi Tablosu -->\r\n-@if (examQuestions.Any())\r\n+else\r\n {\r\n-    <h4>@selectedLesson Dersinin @selectedExamType Sınavı</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Soru No</th>\r\n-                @for (int i = 1; i <= maxObjectives; i++)\r\n-                {\r\n-                    <th>ÖÇ @i</th>\r\n-                }\r\n-                <th>Maks Puan</th>\r\n-                <th>Öğrenci Notu</th>\r\n-                <th>Başarı Puanı</th>\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var question in examQuestions)\r\n-            {\r\n-                <tr>\r\n-                    <td>@question.QuestionNumber</td>\r\n-                    @for (int i = 1; i <= maxObjectives; i++)\r\n-                    {\r\n-                        <td>@(question.Objectives.Contains(i) ? \"1\" : \"0\")</td>\r\n-                    }\r\n-                    <td>@question.MaxScore</td>\r\n-                    <td>@question.StudentScore</td>\r\n-                    <td>@CalculateSuccessPoint(question)</td>\r\n-                </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n }\r\n \r\n @code {\r\n-    // Ders verileri\r\n-    private List<Lesson> Dersler = new List<Lesson>();\r\n-    private Lesson seciliDers;\r\n-    private string selectedLesson;\r\n-    private List<LessonObjective> lessonObjectives = new();\r\n+    private List<Lesson> Dersler { get; set; }\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n \r\n-    // Sınav Türleri\r\n-    private List<string> examTypes = new() { \"Vize\", \"Final\", \"Bütünleme\" };\r\n-    private string selectedExamType;\r\n-    private bool isLoading = true;\r\n-\r\n-    // Sınav Soruları\r\n-    private List<ExamQuestion> examQuestions = new();\r\n-    private int maxObjectives = 3; // ÖÇ sayısı\r\n-    private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n-\r\n-    // Sabit değerler\r\n-    private const double EvaluationWeight = 1.0; // Değerlendirme Ağırlığı\r\n-\r\n-    // Dersin ÖÇ ve PÇ ilişkileri\r\n-    private void LoadLessonObjectives()\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n     {\r\n-        lessonObjectives.Clear();\r\n-        if (selectedLesson == \"PH101\")\r\n+        var selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n         {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n-        };\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n         }\r\n-        else if (selectedLesson == \"MATH101\")\r\n-        {\r\n-            lessonObjectives = new List<LessonObjective>\r\n-        {\r\n-        new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n-        new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n-        new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n-        };\r\n-        }\r\n     }\r\n \r\n-    // Sınav verileri\r\n-    private void LoadExamData()\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n     {\r\n-        examQuestions.Clear();\r\n-        if (selectedLesson == \"PH101\" && selectedExamType == \"Vize\")\r\n+        try\r\n         {\r\n-            examQuestions = new List<ExamQuestion>\r\n-{\r\n-new ExamQuestion { QuestionNumber = 1, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 15,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 2, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 18,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 3, Objectives = new List<int> { 1, 3 }, MaxScore = 20, StudentScore = 14,\r\n-LessonObjective = \"Ö1\" },\r\n-new ExamQuestion { QuestionNumber = 4, Objectives = new List<int> { 1, 2 }, MaxScore = 20, StudentScore = 16,\r\n-LessonObjective = \"Ö2\" },\r\n-new ExamQuestion { QuestionNumber = 5, Objectives = new List<int> { 2, 3 }, MaxScore = 20, StudentScore = 19,\r\n-LessonObjective = \"Ö3\" }\r\n-};\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n         }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n     }\r\n \r\n-    // Başarı puanı hesaplama metodu\r\n-    private double CalculateSuccessPoint(ExamQuestion question)\r\n-    {\r\n-        // Seçili dersin AKTS kredisini al\r\n-        var lesson = Dersler.FirstOrDefault(l => l.CourseCode == selectedLesson);\r\n-        if (lesson == null) return 0;\r\n-\r\n-        // Sorunun ilgili olduğu öğrenim çıktısını bul\r\n-        var objective = lessonObjectives.FirstOrDefault(o => o.Name == question.LessonObjective);\r\n-        if (objective == null) return 0;\r\n-\r\n-        // A: ÖÇ1 - PÇ1 eşleşme katsayısı (P1 için olan değeri al)\r\n-        double A = objective.RelatedOutcomes.TryGetValue(\"P1\", out int value) ? value / 5.0 : 0;\r\n-\r\n-        // B: Soru ÖÇ eşleşme katsayısı (boolean olarak 1 veya 0)\r\n-        double B = question.Objectives.Any() ? 1 : 0;\r\n-\r\n-        // C: Değerlendirme Ağırlığı\r\n-        double C = EvaluationWeight;\r\n-\r\n-        // D: AKTS\r\n\\ No newline at end of file\n-        double D = lesson.AKTS / 10.0;\r\n-\r\n-        // E: Öğrencinin aldığı puan\r\n-        double E = question.StudentScore;\r\n-\r\n-        // F: Max Puan / 100\r\n-        double F = question.MaxScore / 100.0;\r\n-\r\n-        // Formül: (A*B*C*D*E)/(A*B*C*D*F)\r\n-        double successPoint = (A * B * C * D * E) / (A * B * C * D * F);\r\n-\r\n-        return Math.Round(successPoint, 2);\r\n-    }\r\n-\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n-            Dersler = await LessonService.GetLessons();\r\n-\r\n+            Dersler = await LessonService.GetAllLessons();\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n         }\r\n-        finally\r\n-        {\r\n-            // Yükleme durumu güncelleniyor\r\n-            isLoading = false;\r\n-            StateHasChanged();\r\n-        }\r\n     }\r\n-    private async void DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        if (e.Value != null)\r\n-        {\r\n-            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n-            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-        }\r\n-    }\r\n-\r\n-    public class LessonObjective\r\n-    {\r\n-        public string Name { get; set; }\r\n-        public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n-    }\r\n-\r\n-    public class ExamQuestion\r\n-    {\r\n-        public int QuestionNumber { get; set; }\r\n-        public List<int> Objectives { get; set; }\r\n-        public int MaxScore { get; set; }\r\n-        public int StudentScore { get; set; }\r\n-        public string LessonObjective { get; set; }\r\n-    }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1734893256873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            Dersler = await LessonService.GetAllLessons();\r\n+            Dersler = await LessonService.GetLessons();\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n             Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n"
                },
                {
                    "date": 1734893284023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            Dersler = await LessonService.GetLessons();\r\n+            Dersler = await LessonService.GetAllLessons();\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n             Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n"
                },
                {
                    "date": 1734893318416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            Dersler = await LessonService.GetAllLessons();\r\n+            Dersler = await LessonService.GetLessons();\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n             Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n"
                },
                {
                    "date": 1734893333458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"LoadLoPoMatrix\">LoPo Matrisi Göster</button>\r\n+  <button @onclick=\"() => LoadLessonObjectives()\">ÖÇ ve PÇ Verilerini Göster</button>\r\n+\r\n </div>\r\n \r\n <!-- LoPo Matrisi Tablosu -->\r\n @if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n"
                },
                {
                    "date": 1734893342393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-  <button @onclick=\"() => LoadLessonObjectives()\">ÖÇ ve PÇ Verilerini Göster</button>\r\n+  <button @onclick=\"() => LoadLoPoMatrix()\">ÖÇ ve PÇ Verilerini Göster</button>\r\n \r\n </div>\r\n \r\n <!-- LoPo Matrisi Tablosu -->\r\n"
                },
                {
                    "date": 1734893381398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,9 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-  <button @onclick=\"() => LoadLoPoMatrix()\">ÖÇ ve PÇ Verilerini Göster</button>\r\n-\r\n+    <button @onclick=\"LoadLoPoMatrix\">LoPo Matrisi Göster</button>\r\n </div>\r\n \r\n <!-- LoPo Matrisi Tablosu -->\r\n @if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n"
                },
                {
                    "date": 1734893434824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"LoadLoPoMatrix\">LoPo Matrisi Göster</button>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n </div>\r\n \r\n <!-- LoPo Matrisi Tablosu -->\r\n @if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n@@ -60,13 +60,14 @@\n @code {\r\n     private List<Lesson> Dersler { get; set; }\r\n     private List<LearningOutcome> loPoMatrix = new();\r\n     private Dictionary<string, int> loPoValues = new();\r\n+    private string selectedCourseCode;\r\n \r\n     // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n     private async Task DersSecildi(ChangeEventArgs e)\r\n     {\r\n-        var selectedCourseCode = e.Value?.ToString();\r\n+        selectedCourseCode = e.Value?.ToString();\r\n         if (!string.IsNullOrEmpty(selectedCourseCode))\r\n         {\r\n             await LoadLoPoMatrix(selectedCourseCode);\r\n         }\r\n"
                },
                {
                    "date": 1734893587764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,17 @@\n \r\n <!-- Ders Seçimi -->\r\n <div class=\"selection-form\">\r\n     <label>Ders Seçin: </label>\r\n-    <select @onchange=\"DersSecildi\">\r\n+    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n+    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n         <option disabled selected>Bir ders seçin</option>\r\n         @foreach (var ders in Dersler)\r\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n </div>\r\n \r\n <!-- LoPo Matrisi Tablosu -->\r\n @if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n@@ -57,9 +58,9 @@\n     <p>LoPo matrisi verileri mevcut değil.</p>\r\n }\r\n \r\n @code {\r\n-    private List<Lesson> Dersler { get; set; }\r\n+    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n     private List<LearningOutcome> loPoMatrix = new();\r\n     private Dictionary<string, int> loPoValues = new();\r\n     private string selectedCourseCode;\r\n \r\n@@ -104,9 +105,9 @@\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            Dersler = await LessonService.GetLessons();\r\n+            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n             Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n"
                },
                {
                    "date": 1734893747993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +1,162 @@\n-@page \"/exam-analysis\"\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-@inject LessonService LessonService\r\n-@inject NavigationManager NavigationManager\r\n+/* Genel sayfa stilleri */\r\n+body {\r\n+    font-family: 'Arial', sans-serif;\r\n+    background-color: #f7fafc;\r\n+    margin: 0;\r\n+    padding: 0;\r\n+}\r\n \r\n-<link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n+/* Başlık stil */\r\n+h3 {\r\n+    font-size: 28px;\r\n+    font-weight: 600;\r\n+    color: #4a5568;\r\n+    text-align: center;\r\n+    margin-top: 40px;\r\n+    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+}\r\n \r\n-<h3>Ders Analizi ve Değerlendirme</h3>\r\n+/* Ders Seçimi Formu */\r\n+.selection-form {\r\n+    background: white;\r\n+    padding: 20px;\r\n+    border-radius: 15px;\r\n+    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);\r\n+    max-width: 600px;\r\n+    margin: 30px auto;\r\n+}\r\n \r\n-<!-- Ders Seçimi -->\r\n-<div class=\"selection-form\">\r\n-    <label>Ders Seçin: </label>\r\n-    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n-    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n-        <option disabled selected>Bir ders seçin</option>\r\n-        @foreach (var ders in Dersler)\r\n-        {\r\n-            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-        }\r\n-    </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n-</div>\r\n+.selection-form label {\r\n+    display: block;\r\n+    font-size: 14px;\r\n+    color: #4a5568;\r\n+    font-weight: 500;\r\n+    margin-bottom: 8px;\r\n+}\r\n \r\n-<!-- LoPo Matrisi Tablosu -->\r\n-@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n-{\r\n-    <h4>LoPo Matrisi</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table>\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n-                    {\r\n-                        <th>P@(i)</th>\r\n-                    }\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    <tr>\r\n-                        <th>@outcome.Description</th>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var key = $\"P{i}Ö{outcome.Id}\";\r\n-                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n-                        }\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n+.selection-form select,\r\n+.selection-form button {\r\n+    width: 100%;\r\n+    padding: 12px 15px;\r\n+    border: 2px solid #e2e8f0;\r\n+    border-radius: 10px;\r\n+    font-size: 14px;\r\n+    margin-bottom: 15px;\r\n }\r\n-else\r\n-{\r\n-    <p>LoPo matrisi verileri mevcut değil.</p>\r\n+\r\n+.selection-form button {\r\n+    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    font-weight: 600;\r\n+    transition: all 0.3s ease;\r\n+    box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);\r\n }\r\n \r\n-@code {\r\n-    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n-    private List<LearningOutcome> loPoMatrix = new();\r\n-    private Dictionary<string, int> loPoValues = new();\r\n-    private string selectedCourseCode;\r\n+.selection-form button:hover {\r\n+    transform: translateY(-2px);\r\n+    box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);\r\n+}\r\n \r\n-    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n-    private async Task DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        selectedCourseCode = e.Value?.ToString();\r\n-        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n-        {\r\n-            await LoadLoPoMatrix(selectedCourseCode);\r\n-        }\r\n-    }\r\n+.selection-form button:disabled {\r\n+    background: #e2e8f0;\r\n+    cursor: not-allowed;\r\n+}\r\n \r\n-    // LoPo Matrisi verilerini yükle\r\n-    private async Task LoadLoPoMatrix(string courseCode)\r\n-    {\r\n-        try\r\n-        {\r\n-            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n-            if (lesson != null)\r\n-            {\r\n-                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+/* LoPo Matrisi */\r\n+.lo-po-matrix {\r\n+    background: white;\r\n+    border-radius: 12px;\r\n+    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);\r\n+    padding: 15px;\r\n+    margin: 25px 0;\r\n+}\r\n \r\n-                // LoPoRelations verilerini yükle\r\n-                foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    foreach (var relation in outcome.LoPoRelations)\r\n-                    {\r\n-                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n-                        loPoValues[key] = relation.Score;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n+.lo-po-matrix table {\r\n+    width: 100%;\r\n+    border-spacing: 0;\r\n+    border-collapse: separate;\r\n+    font-size: 14px;\r\n+}\r\n \r\n-    // Sayfa ilk yüklendiğinde dersleri getir\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n+.lo-po-matrix th {\r\n+    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);\r\n+    color: white;\r\n+    padding: 15px;\r\n+    font-weight: 600;\r\n+    text-transform: uppercase;\r\n+    letter-spacing: 0.5px;\r\n }\r\n+\r\n+.lo-po-matrix th:first-child {\r\n+    border-radius: 8px 0 0 8px;\r\n+}\r\n+\r\n+.lo-po-matrix th:last-child {\r\n+    border-radius: 0 8px 8px 0;\r\n+}\r\n+\r\n+.lo-po-matrix td {\r\n+    padding: 12px;\r\n+    text-align: center;\r\n+    border-bottom: 1px solid #e2e8f0;\r\n+}\r\n+\r\n+.lo-po-matrix input[type=\"number\"] {\r\n+    width: 60px;\r\n+    padding: 8px;\r\n+    text-align: center;\r\n+    border: 2px solid #e2e8f0;\r\n+    border-radius: 6px;\r\n+    transition: all 0.3s ease;\r\n+}\r\n+\r\n+.lo-po-matrix input[type=\"number\"]:focus {\r\n+    border-color: #6366f1;\r\n+    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\r\n+}\r\n+\r\n+.total-row {\r\n+    background: #edf2f7;\r\n+    font-weight: 600;\r\n+}\r\n+\r\n+.total-row td {\r\n+    color: #2d3748;\r\n+}\r\n+\r\n+/* Uyarı mesajları */\r\n+.alert {\r\n+    padding: 15px;\r\n+    margin: 20px 0;\r\n+    border-radius: 10px;\r\n+    font-size: 14px;\r\n+    transition: all 0.3s ease;\r\n+}\r\n+\r\n+.alert-danger {\r\n+    background: linear-gradient(to right, #fee2e2, #fecaca);\r\n+    border: none;\r\n+    color: #991b1b;\r\n+    box-shadow: 0 4px 15px rgba(248, 113, 113, 0.2);\r\n+}\r\n+\r\n+/* Ekstra Butonlar */\r\n+.add-outcome-button {\r\n+    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);\r\n+    color: white;\r\n+    padding: 12px 25px;\r\n+    border: none;\r\n+    border-radius: 10px;\r\n+    font-weight: 600;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s ease;\r\n+    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);\r\n+}\r\n+\r\n+.add-outcome-button:hover {\r\n+    transform: translateY(-2px);\r\n+    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);\r\n+}\r\n"
                },
                {
                    "date": 1734893754076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,162 +1,116 @@\n-/* Genel sayfa stilleri */\r\n-body {\r\n-    font-family: 'Arial', sans-serif;\r\n-    background-color: #f7fafc;\r\n-    margin: 0;\r\n-    padding: 0;\r\n-}\r\n+@page \"/exam-analysis\"\r\n+@using MudekServer.Models\r\n+@using MudekServer.Services\r\n+@inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n \r\n-/* Başlık stil */\r\n-h3 {\r\n-    font-size: 28px;\r\n-    font-weight: 600;\r\n-    color: #4a5568;\r\n-    text-align: center;\r\n-    margin-top: 40px;\r\n-    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);\r\n-    -webkit-background-clip: text;\r\n-    -webkit-text-fill-color: transparent;\r\n-}\r\n+<link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n \r\n-/* Ders Seçimi Formu */\r\n-.selection-form {\r\n-    background: white;\r\n-    padding: 20px;\r\n-    border-radius: 15px;\r\n-    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);\r\n-    max-width: 600px;\r\n-    margin: 30px auto;\r\n-}\r\n+<h3>Ders Analizi ve Değerlendirme</h3>\r\n \r\n-.selection-form label {\r\n-    display: block;\r\n-    font-size: 14px;\r\n-    color: #4a5568;\r\n-    font-weight: 500;\r\n-    margin-bottom: 8px;\r\n-}\r\n+<!-- Ders Seçimi -->\r\n+<div class=\"selection-form\">\r\n+    <label>Ders Seçin: </label>\r\n+    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n+    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n+        <option disabled selected>Bir ders seçin</option>\r\n+        @foreach (var ders in Dersler)\r\n+        {\r\n+            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n+        }\r\n+    </select>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n+</div>\r\n \r\n-.selection-form select,\r\n-.selection-form button {\r\n-    width: 100%;\r\n-    padding: 12px 15px;\r\n-    border: 2px solid #e2e8f0;\r\n-    border-radius: 10px;\r\n-    font-size: 14px;\r\n-    margin-bottom: 15px;\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n+{\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n+                    {\r\n+                        <th>P@(i)</th>\r\n+                    }\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n }\r\n-\r\n-.selection-form button {\r\n-    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);\r\n-    color: white;\r\n-    cursor: pointer;\r\n-    font-weight: 600;\r\n-    transition: all 0.3s ease;\r\n-    box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);\r\n+else\r\n+{\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n }\r\n \r\n-.selection-form button:hover {\r\n-    transform: translateY(-2px);\r\n-    box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);\r\n-}\r\n+@code {\r\n+    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n+    private string selectedCourseCode;\r\n \r\n-.selection-form button:disabled {\r\n-    background: #e2e8f0;\r\n-    cursor: not-allowed;\r\n-}\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n+        {\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n+        }\r\n+    }\r\n \r\n-/* LoPo Matrisi */\r\n-.lo-po-matrix {\r\n-    background: white;\r\n-    border-radius: 12px;\r\n-    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);\r\n-    padding: 15px;\r\n-    margin: 25px 0;\r\n-}\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n+    {\r\n+        try\r\n+        {\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n \r\n-.lo-po-matrix table {\r\n-    width: 100%;\r\n-    border-spacing: 0;\r\n-    border-collapse: separate;\r\n-    font-size: 14px;\r\n-}\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n \r\n-.lo-po-matrix th {\r\n-    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);\r\n-    color: white;\r\n-    padding: 15px;\r\n-    font-weight: 600;\r\n-    text-transform: uppercase;\r\n-    letter-spacing: 0.5px;\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n }\r\n-\r\n-.lo-po-matrix th:first-child {\r\n-    border-radius: 8px 0 0 8px;\r\n-}\r\n-\r\n-.lo-po-matrix th:last-child {\r\n-    border-radius: 0 8px 8px 0;\r\n-}\r\n-\r\n-.lo-po-matrix td {\r\n-    padding: 12px;\r\n-    text-align: center;\r\n-    border-bottom: 1px solid #e2e8f0;\r\n-}\r\n-\r\n-.lo-po-matrix input[type=\"number\"] {\r\n-    width: 60px;\r\n-    padding: 8px;\r\n-    text-align: center;\r\n-    border: 2px solid #e2e8f0;\r\n-    border-radius: 6px;\r\n-    transition: all 0.3s ease;\r\n-}\r\n-\r\n-.lo-po-matrix input[type=\"number\"]:focus {\r\n-    border-color: #6366f1;\r\n-    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\r\n-}\r\n-\r\n-.total-row {\r\n-    background: #edf2f7;\r\n-    font-weight: 600;\r\n-}\r\n-\r\n-.total-row td {\r\n-    color: #2d3748;\r\n-}\r\n-\r\n-/* Uyarı mesajları */\r\n-.alert {\r\n-    padding: 15px;\r\n-    margin: 20px 0;\r\n-    border-radius: 10px;\r\n-    font-size: 14px;\r\n-    transition: all 0.3s ease;\r\n-}\r\n-\r\n-.alert-danger {\r\n-    background: linear-gradient(to right, #fee2e2, #fecaca);\r\n-    border: none;\r\n-    color: #991b1b;\r\n-    box-shadow: 0 4px 15px rgba(248, 113, 113, 0.2);\r\n-}\r\n-\r\n-/* Ekstra Butonlar */\r\n-.add-outcome-button {\r\n-    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);\r\n-    color: white;\r\n-    padding: 12px 25px;\r\n-    border: none;\r\n-    border-radius: 10px;\r\n-    font-weight: 600;\r\n-    cursor: pointer;\r\n-    transition: all 0.3s ease;\r\n-    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);\r\n-}\r\n-\r\n-.add-outcome-button:hover {\r\n-    transform: translateY(-2px);\r\n-    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);\r\n-}\r\n"
                },
                {
                    "date": 1734893786009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n @inject NavigationManager NavigationManager\r\n-\r\n+<head></head>\r\n <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n \r\n <h3>Ders Analizi ve Değerlendirme</h3>\r\n \r\n"
                },
                {
                    "date": 1734893791812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+@page \"/exam-analysis\"\r\n+@using MudekServer.Models\r\n+@using MudekServer.Services\r\n+@inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n+<head>\r\n+<link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n+</head>\r\n+\r\n+\r\n+<h3>Ders Analizi ve Değerlendirme</h3>\r\n+\r\n+<!-- Ders Seçimi -->\r\n+<div class=\"selection-form\">\r\n+    <label>Ders Seçin: </label>\r\n+    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n+    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n+        <option disabled selected>Bir ders seçin</option>\r\n+        @foreach (var ders in Dersler)\r\n+        {\r\n+            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n+        }\r\n+    </select>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n+</div>\r\n+\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n+{\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n+                    {\r\n+                        <th>P@(i)</th>\r\n+                    }\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n+}\r\n+else\r\n+{\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n+}\r\n+\r\n+@code {\r\n+    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n+    private string selectedCourseCode;\r\n+\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n+        {\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n+        }\r\n+    }\r\n+\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n+    {\r\n+        try\r\n+        {\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1734893954915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n @inject NavigationManager NavigationManager\r\n <head>\r\n-<link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n+    <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n </head>\r\n \r\n \r\n <h3>Ders Analizi ve Değerlendirme</h3>\r\n@@ -115,120 +115,4 @@\n             Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n         }\r\n     }\r\n }\r\n-@page \"/exam-analysis\"\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-@inject LessonService LessonService\r\n-@inject NavigationManager NavigationManager\r\n-<head></head>\r\n-<link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n-\r\n-<h3>Ders Analizi ve Değerlendirme</h3>\r\n-\r\n-<!-- Ders Seçimi -->\r\n-<div class=\"selection-form\">\r\n-    <label>Ders Seçin: </label>\r\n-    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n-    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n-        <option disabled selected>Bir ders seçin</option>\r\n-        @foreach (var ders in Dersler)\r\n-        {\r\n-            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-        }\r\n-    </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n-</div>\r\n-\r\n-<!-- LoPo Matrisi Tablosu -->\r\n-@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n-{\r\n-    <h4>LoPo Matrisi</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table>\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n-                    {\r\n-                        <th>P@(i)</th>\r\n-                    }\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    <tr>\r\n-                        <th>@outcome.Description</th>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var key = $\"P{i}Ö{outcome.Id}\";\r\n-                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n-                        }\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n-}\r\n-else\r\n-{\r\n-    <p>LoPo matrisi verileri mevcut değil.</p>\r\n-}\r\n-\r\n-@code {\r\n-    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n-    private List<LearningOutcome> loPoMatrix = new();\r\n-    private Dictionary<string, int> loPoValues = new();\r\n-    private string selectedCourseCode;\r\n-\r\n-    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n-    private async Task DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        selectedCourseCode = e.Value?.ToString();\r\n-        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n-        {\r\n-            await LoadLoPoMatrix(selectedCourseCode);\r\n-        }\r\n-    }\r\n-\r\n-    // LoPo Matrisi verilerini yükle\r\n-    private async Task LoadLoPoMatrix(string courseCode)\r\n-    {\r\n-        try\r\n-        {\r\n-            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n-            if (lesson != null)\r\n-            {\r\n-                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n-\r\n-                // LoPoRelations verilerini yükle\r\n-                foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    foreach (var relation in outcome.LoPoRelations)\r\n-                    {\r\n-                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n-                        loPoValues[key] = relation.Score;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-\r\n-    // Sayfa ilk yüklendiğinde dersleri getir\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1734893962756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+@page \"/exam-analysis\"\r\n+@using MudekServer.Models\r\n+@using MudekServer.Services\r\n+@inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n+<head>\r\n+    <link href=\"MudekServer\\wwwroot\\css\\exam-analysis.css\" rel=\"stylesheet\" />\r\n+</head>\r\n+\r\n+\r\n+<h3>Ders Analizi ve Değerlendirme</h3>\r\n+\r\n+<!-- Ders Seçimi -->\r\n+<div class=\"selection-form\">\r\n+    <label>Ders Seçin: </label>\r\n+    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n+    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n+        <option disabled selected>Bir ders seçin</option>\r\n+        @foreach (var ders in Dersler)\r\n+        {\r\n+            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n+        }\r\n+    </select>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n+</div>\r\n+\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n+{\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n+                    {\r\n+                        <th>P@(i)</th>\r\n+                    }\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n+}\r\n+else\r\n+{\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n+}\r\n+\r\n+@code {\r\n+    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n+    private string selectedCourseCode;\r\n+\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n+        {\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n+        }\r\n+    }\r\n+\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n+    {\r\n+        try\r\n+        {\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1734893969720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+@page \"/exam-analysis\"\r\n+@using MudekServer.Models\r\n+@using MudekServer.Services\r\n+@inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n+<head>\r\n+    <link href=\"\\wwwroot\\css\\exam-analysis.css\" rel=\"stylesheet\" />\r\n+</head>\r\n+\r\n+\r\n+<h3>Ders Analizi ve Değerlendirme</h3>\r\n+\r\n+<!-- Ders Seçimi -->\r\n+<div class=\"selection-form\">\r\n+    <label>Ders Seçin: </label>\r\n+    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n+    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n+        <option disabled selected>Bir ders seçin</option>\r\n+        @foreach (var ders in Dersler)\r\n+        {\r\n+            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n+        }\r\n+    </select>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n+</div>\r\n+\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n+{\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n+                    {\r\n+                        <th>P@(i)</th>\r\n+                    }\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n+}\r\n+else\r\n+{\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n+}\r\n+\r\n+@code {\r\n+    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n+    private string selectedCourseCode;\r\n+\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n+        {\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n+        }\r\n+    }\r\n+\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n+    {\r\n+        try\r\n+        {\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1734893989750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+@page \"/exam-analysis\"\r\n+@using MudekServer.Models\r\n+@using MudekServer.Services\r\n+@inject LessonService LessonService\r\n+@inject NavigationManager NavigationManager\r\n+<head>\r\n+    <link href=\"wwwroot\\css\\exam-analysis.css\" rel=\"stylesheet\" />\r\n+</head>\r\n+\r\n+\r\n+<h3>Ders Analizi ve Değerlendirme</h3>\r\n+\r\n+<!-- Ders Seçimi -->\r\n+<div class=\"selection-form\">\r\n+    <label>Ders Seçin: </label>\r\n+    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n+    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n+        <option disabled selected>Bir ders seçin</option>\r\n+        @foreach (var ders in Dersler)\r\n+        {\r\n+            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n+        }\r\n+    </select>\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n+</div>\r\n+\r\n+<!-- LoPo Matrisi Tablosu -->\r\n+@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n+{\r\n+    <h4>LoPo Matrisi</h4>\r\n+    <div class=\"lo-po-matrix\">\r\n+        <table>\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                    @for (int i = 1; i <= 11; i++)\r\n+                    {\r\n+                        <th>P@(i)</th>\r\n+                    }\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    <tr>\r\n+                        <th>@outcome.Description</th>\r\n+                        @for (int i = 1; i <= 11; i++)\r\n+                        {\r\n+                            var key = $\"P{i}Ö{outcome.Id}\";\r\n+                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n+                        }\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n+    </div>\r\n+}\r\n+else\r\n+{\r\n+    <p>LoPo matrisi verileri mevcut değil.</p>\r\n+}\r\n+\r\n+@code {\r\n+    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n+    private List<LearningOutcome> loPoMatrix = new();\r\n+    private Dictionary<string, int> loPoValues = new();\r\n+    private string selectedCourseCode;\r\n+\r\n+    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n+    private async Task DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        selectedCourseCode = e.Value?.ToString();\r\n+        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n+        {\r\n+            await LoadLoPoMatrix(selectedCourseCode);\r\n+        }\r\n+    }\r\n+\r\n+    // LoPo Matrisi verilerini yükle\r\n+    private async Task LoadLoPoMatrix(string courseCode)\r\n+    {\r\n+        try\r\n+        {\r\n+            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n+            if (lesson != null)\r\n+            {\r\n+                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n+\r\n+                // LoPoRelations verilerini yükle\r\n+                foreach (var outcome in loPoMatrix)\r\n+                {\r\n+                    foreach (var relation in outcome.LoPoRelations)\r\n+                    {\r\n+                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n+                        loPoValues[key] = relation.Score;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+\r\n+    // Sayfa ilk yüklendiğinde dersleri getir\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1734893995963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,362 +3,8 @@\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n @inject NavigationManager NavigationManager\r\n <head>\r\n-    <link href=\"wwwroot\\css\\exam-analysis.css\" rel=\"stylesheet\" />\r\n-</head>\r\n-\r\n-\r\n-<h3>Ders Analizi ve Değerlendirme</h3>\r\n-\r\n-<!-- Ders Seçimi -->\r\n-<div class=\"selection-form\">\r\n-    <label>Ders Seçin: </label>\r\n-    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n-    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n-        <option disabled selected>Bir ders seçin</option>\r\n-        @foreach (var ders in Dersler)\r\n-        {\r\n-            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-        }\r\n-    </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n-</div>\r\n-\r\n-<!-- LoPo Matrisi Tablosu -->\r\n-@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n-{\r\n-    <h4>LoPo Matrisi</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table>\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n-                    {\r\n-                        <th>P@(i)</th>\r\n-                    }\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    <tr>\r\n-                        <th>@outcome.Description</th>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var key = $\"P{i}Ö{outcome.Id}\";\r\n-                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n-                        }\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n-}\r\n-else\r\n-{\r\n-    <p>LoPo matrisi verileri mevcut değil.</p>\r\n-}\r\n-\r\n-@code {\r\n-    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n-    private List<LearningOutcome> loPoMatrix = new();\r\n-    private Dictionary<string, int> loPoValues = new();\r\n-    private string selectedCourseCode;\r\n-\r\n-    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n-    private async Task DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        selectedCourseCode = e.Value?.ToString();\r\n-        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n-        {\r\n-            await LoadLoPoMatrix(selectedCourseCode);\r\n-        }\r\n-    }\r\n-\r\n-    // LoPo Matrisi verilerini yükle\r\n-    private async Task LoadLoPoMatrix(string courseCode)\r\n-    {\r\n-        try\r\n-        {\r\n-            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n-            if (lesson != null)\r\n-            {\r\n-                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n-\r\n-                // LoPoRelations verilerini yükle\r\n-                foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    foreach (var relation in outcome.LoPoRelations)\r\n-                    {\r\n-                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n-                        loPoValues[key] = relation.Score;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-\r\n-    // Sayfa ilk yüklendiğinde dersleri getir\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-}\r\n-@page \"/exam-analysis\"\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-@inject LessonService LessonService\r\n-@inject NavigationManager NavigationManager\r\n-<head>\r\n-    <link href=\"\\wwwroot\\css\\exam-analysis.css\" rel=\"stylesheet\" />\r\n-</head>\r\n-\r\n-\r\n-<h3>Ders Analizi ve Değerlendirme</h3>\r\n-\r\n-<!-- Ders Seçimi -->\r\n-<div class=\"selection-form\">\r\n-    <label>Ders Seçin: </label>\r\n-    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n-    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n-        <option disabled selected>Bir ders seçin</option>\r\n-        @foreach (var ders in Dersler)\r\n-        {\r\n-            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-        }\r\n-    </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n-</div>\r\n-\r\n-<!-- LoPo Matrisi Tablosu -->\r\n-@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n-{\r\n-    <h4>LoPo Matrisi</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table>\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n-                    {\r\n-                        <th>P@(i)</th>\r\n-                    }\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    <tr>\r\n-                        <th>@outcome.Description</th>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var key = $\"P{i}Ö{outcome.Id}\";\r\n-                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n-                        }\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n-}\r\n-else\r\n-{\r\n-    <p>LoPo matrisi verileri mevcut değil.</p>\r\n-}\r\n-\r\n-@code {\r\n-    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n-    private List<LearningOutcome> loPoMatrix = new();\r\n-    private Dictionary<string, int> loPoValues = new();\r\n-    private string selectedCourseCode;\r\n-\r\n-    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n-    private async Task DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        selectedCourseCode = e.Value?.ToString();\r\n-        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n-        {\r\n-            await LoadLoPoMatrix(selectedCourseCode);\r\n-        }\r\n-    }\r\n-\r\n-    // LoPo Matrisi verilerini yükle\r\n-    private async Task LoadLoPoMatrix(string courseCode)\r\n-    {\r\n-        try\r\n-        {\r\n-            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n-            if (lesson != null)\r\n-            {\r\n-                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n-\r\n-                // LoPoRelations verilerini yükle\r\n-                foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    foreach (var relation in outcome.LoPoRelations)\r\n-                    {\r\n-                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n-                        loPoValues[key] = relation.Score;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-\r\n-    // Sayfa ilk yüklendiğinde dersleri getir\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-}\r\n-@page \"/exam-analysis\"\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-@inject LessonService LessonService\r\n-@inject NavigationManager NavigationManager\r\n-<head>\r\n-    <link href=\"MudekServer\\wwwroot\\css\\exam-analysis.css\" rel=\"stylesheet\" />\r\n-</head>\r\n-\r\n-\r\n-<h3>Ders Analizi ve Değerlendirme</h3>\r\n-\r\n-<!-- Ders Seçimi -->\r\n-<div class=\"selection-form\">\r\n-    <label>Ders Seçin: </label>\r\n-    <!-- Dersler listesi null veya boşsa, placeholder olarak 'Yükleniyor' gösterebiliriz -->\r\n-    <select @onchange=\"DersSecildi\" disabled=\"@(!Dersler.Any())\">\r\n-        <option disabled selected>Bir ders seçin</option>\r\n-        @foreach (var ders in Dersler)\r\n-        {\r\n-            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-        }\r\n-    </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n-</div>\r\n-\r\n-<!-- LoPo Matrisi Tablosu -->\r\n-@if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n-{\r\n-    <h4>LoPo Matrisi</h4>\r\n-    <div class=\"lo-po-matrix\">\r\n-        <table>\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                    @for (int i = 1; i <= 11; i++)\r\n-                    {\r\n-                        <th>P@(i)</th>\r\n-                    }\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    <tr>\r\n-                        <th>@outcome.Description</th>\r\n-                        @for (int i = 1; i <= 11; i++)\r\n-                        {\r\n-                            var key = $\"P{i}Ö{outcome.Id}\";\r\n-                            <td>@loPoValues.GetValueOrDefault(key, 0)</td>\r\n-                        }\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-    </div>\r\n-}\r\n-else\r\n-{\r\n-    <p>LoPo matrisi verileri mevcut değil.</p>\r\n-}\r\n-\r\n-@code {\r\n-    private List<Lesson> Dersler { get; set; } = new List<Lesson>(); // Başlangıçta boş liste\r\n-    private List<LearningOutcome> loPoMatrix = new();\r\n-    private Dictionary<string, int> loPoValues = new();\r\n-    private string selectedCourseCode;\r\n-\r\n-    // Ders seçildikten sonra ilgili LoPo matrisi verilerini yükle\r\n-    private async Task DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        selectedCourseCode = e.Value?.ToString();\r\n-        if (!string.IsNullOrEmpty(selectedCourseCode))\r\n-        {\r\n-            await LoadLoPoMatrix(selectedCourseCode);\r\n-        }\r\n-    }\r\n-\r\n-    // LoPo Matrisi verilerini yükle\r\n-    private async Task LoadLoPoMatrix(string courseCode)\r\n-    {\r\n-        try\r\n-        {\r\n-            var lesson = await LessonService.GetLessonWithLoPoRelations(courseCode);\r\n-            if (lesson != null)\r\n-            {\r\n-                loPoMatrix = lesson.LearningOutcomes.ToList();\r\n-\r\n-                // LoPoRelations verilerini yükle\r\n-                foreach (var outcome in loPoMatrix)\r\n-                {\r\n-                    foreach (var relation in outcome.LoPoRelations)\r\n-                    {\r\n-                        var key = $\"P{relation.ProgramOutcome}Ö{outcome.Id}\";\r\n-                        loPoValues[key] = relation.Score;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"LoPo Matrisi Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-\r\n-    // Sayfa ilk yüklendiğinde dersleri getir\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons() ?? new List<Lesson>(); // Dersler boşsa yeni bir liste ver\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.Error.WriteLine($\"Dersleri Yükleme Hatası: {ex.Message}\");\r\n-        }\r\n-    }\r\n-}\r\n-@page \"/exam-analysis\"\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-@inject LessonService LessonService\r\n-@inject NavigationManager NavigationManager\r\n-<head>\r\n     <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n </head>\r\n \r\n \r\n"
                },
                {
                    "date": 1734894046565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,11 @@\n @using MudekServer.Services\r\n @inject LessonService LessonService\r\n @inject NavigationManager NavigationManager\r\n <head>\r\n-    <link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n+    <link href=\"css/exam-analysis.css\" rel=\"stylesheet\">\r\n </head>\r\n \r\n-\r\n <h3>Ders Analizi ve Değerlendirme</h3>\r\n \r\n <!-- Ders Seçimi -->\r\n <div class=\"selection-form\">\r\n"
                },
                {
                    "date": 1734894082645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         {\r\n             <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n         }\r\n     </select>\r\n-    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>L\r\n+    <button @onclick=\"() => LoadLoPoMatrix(selectedCourseCode)\" disabled=\"@string.IsNullOrEmpty(selectedCourseCode)\">LoPo Matrisi Göster</button>\r\n </div>\r\n \r\n <!-- LoPo Matrisi Tablosu -->\r\n @if (loPoMatrix != null && loPoMatrix.Count > 0)\r\n"
                }
            ],
            "date": 1734891904747,
            "name": "Commit-0",
            "content": "@page \"/exam-analysis\"\r\n@using MudekServer.Models\r\n@using MudekServer.Services\r\n@inject LessonService LessonService\r\n\r\n<link href=\"css/exam-analysis.css\" rel=\"stylesheet\" />\r\n\r\n<h3>Ders Analizi ve Değerlendirme</h3>\r\n\r\n<!-- Ders Seçimi -->\r\n<div class=\"selection-form\">\r\n    <label>Ders Seçin: </label>\r\n    <select @bind=\"selectedLesson\">\r\n        <option disabled selected>Bir ders seçin</option>\r\n        @foreach (var ders in Dersler)\r\n        {\r\n            <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n        }\r\n    </select>\r\n    <button @onclick=\"LoadLessonObjectives\">ÖÇ ve PÇ Verilerini Göster</button>\r\n</div>\r\n\r\n<!-- ÖÇ ve PÇ İlişkisi Tablosu -->\r\n@if (lessonObjectives.Any())\r\n{\r\n    <h4>@selectedLesson Dersine Ait Öğrenim Çıktıları ve Program Çıktıları</h4>\r\n    <table class=\"table table-striped table-bordered\">\r\n        <thead>\r\n            <tr>\r\n                <th>Program Çıktıları</th>\r\n                @foreach (var outcome in programOutcomes)\r\n                {\r\n                    <th>@outcome</th>\r\n                }\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var objective in lessonObjectives)\r\n            {\r\n                <tr>\r\n                    <td>@objective.Name</td>\r\n                    @foreach (var outcome in programOutcomes)\r\n                    {\r\n                        <td>@(objective.RelatedOutcomes.TryGetValue(outcome, out int value) ? value.ToString() : \"0\")</td>\r\n                    }\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n}\r\nelse if (!string.IsNullOrEmpty(selectedLesson))\r\n{\r\n    <p>Seçilen ders için ÖÇ ve PÇ verisi bulunamadı.</p>\r\n}\r\n\r\n@code {\r\n    private List<Lesson> Dersler = new List<Lesson>();\r\n    private string selectedLesson;\r\n    private List<LessonObjective> lessonObjectives = new();\r\n    private List<string> programOutcomes = new() { \"P1\", \"P2\", \"P3\", \"P4\", \"P5\" };\r\n\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        try\r\n        {\r\n            // Dersleri asenkron olarak yükle\r\n            Dersler = await LessonService.GetLessons();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n        }\r\n    }\r\n\r\n    private void LoadLessonObjectives()\r\n    {\r\n        lessonObjectives.Clear();\r\n\r\n        // Seçilen derse göre ÖÇ ve PÇ verilerini belirle\r\n        if (selectedLesson == \"PH101\")\r\n        {\r\n            lessonObjectives = new List<LessonObjective>\r\n            {\r\n                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 5 }, { \"P3\", 4 } } },\r\n                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P2\", 3 }, { \"P4\", 5 } } },\r\n                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P5\", 2 } } }\r\n            };\r\n        }\r\n        else if (selectedLesson == \"MATH101\")\r\n        {\r\n            lessonObjectives = new List<LessonObjective>\r\n            {\r\n                new LessonObjective { Name = \"Ö1\", RelatedOutcomes = new Dictionary<string, int> { { \"P1\", 4 }, { \"P2\", 3 } } },\r\n                new LessonObjective { Name = \"Ö2\", RelatedOutcomes = new Dictionary<string, int> { { \"P3\", 5 } } },\r\n                new LessonObjective { Name = \"Ö3\", RelatedOutcomes = new Dictionary<string, int> { { \"P4\", 2 }, { \"P5\", 3 } } }\r\n            };\r\n        }\r\n        else\r\n        {\r\n            // Seçilen ders için veri yoksa boş bırak\r\n            lessonObjectives = new();\r\n        }\r\n    }\r\n\r\n    public class LessonObjective\r\n    {\r\n        public string Name { get; set; }\r\n        public Dictionary<string, int> RelatedOutcomes { get; set; }\r\n    }\r\n}\r\n"
        }
    ]
}