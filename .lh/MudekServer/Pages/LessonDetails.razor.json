{
    "sourceFile": "MudekServer/Pages/LessonDetails.razor",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734892638130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734892658512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,14 +111,34 @@\n \r\n     private bool isMaxOutcomesReached => learningOutcomesList.Count >= MaxOutcomes;\r\n \r\n     protected override async Task OnInitializedAsync()\r\n-{\r\n-    learningOutcomesList = await _loPoMatrixService.GetLearningOutcomesAsync(CourseCode);\r\n-    loPoMatrix = await _loPoMatrixService.GetLoPoMatrixAsync(CourseCode);\r\n-}\r\n+    {\r\n+        try \r\n+        {\r\n+            var lesson = await _context.Lessons\r\n+                .Include(l => l.LearningOutcomes)\r\n+                    .ThenInclude(lo => lo.LoPoRelations)\r\n+                .FirstOrDefaultAsync(l => l.CourseCode == CourseCode);\r\n \r\n+            if (lesson != null)\r\n+            {\r\n+                // Öğrenim çıktılarını yükle\r\n+                learningOutcomesList = lesson.LearningOutcomes.ToList();\r\n \r\n+                // LoPoRelation verilerini yükle\r\n+                await LoadLoPoRelations();\r\n+            }\r\n+            \r\n+            // Gerekli başlangıç ayarları\r\n+            InitializeLoPoValues();\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            await HandleError(\"Veri yükleme hatası\", ex);\r\n+        }\r\n+    }\r\n+\r\n     private async Task LoadLoPoRelations()\r\n     {\r\n         loPoValues.Clear();\r\n         foreach (var outcome in learningOutcomesList)\r\n"
                }
            ],
            "date": 1734892638130,
            "name": "Commit-0",
            "content": "@page \"/lessons/{courseCode}\"\r\n@using Microsoft.AspNetCore.WebUtilities\r\n@using Microsoft.EntityFrameworkCore\r\n@using MudekServer.Data\r\n@using MudekServer.Models\r\n@using MudekServer.Services\r\n@inject IJSRuntime JSRuntime\r\n@inject NavigationManager NavigationManager\r\n@inject ApplicationDbContext _context\r\n@inject LoPoMatrixService _loPoMatrixService\r\n<head>\r\n    <link rel=\"stylesheet\" href=\"css/LessonDetails.css\">\r\n</head>\r\n<div class=\"lesson-details\">\r\n    <h3>Ders Detayları</h3>\r\n\r\n    <p>Ders Kodu: @CourseCode</p>\r\n\r\n    <div class=\"learning-outcomes-section\">\r\n        <button @onclick=\"ToggleLearningOutcomes\" class=\"toggle-button\">\r\n            Öğrenim Çıktıları\r\n            <span class=\"@(isLearningOutcomesOpen ? \"chevron-up\" : \"chevron-down\")\"></span>\r\n        </button>\r\n\r\n        @if (isLearningOutcomesOpen)\r\n        {\r\n            <div class=\"learning-outcomes-content\">\r\n                <h4>Öğrenim Çıktıları Ekle</h4>\r\n                <button @onclick=\"AddLearningOutcome\" \r\n                        class=\"add-outcome-button\" \r\n                        disabled=\"@isMaxOutcomesReached\">\r\n                    Yeni Öğrenim Çıktısı Ekle\r\n                </button>\r\n                \r\n                @if (isMaxOutcomesReached)\r\n                {\r\n                    <div class=\"alert alert-danger\">\r\n                        Maksimum 6 öğrenim çıktısı ekleyebilirsiniz.\r\n                    </div>\r\n                }\r\n\r\n                @foreach (var outcome in learningOutcomesList)\r\n                {\r\n                    <div class=\"input-group\">\r\n                        <label>@(learningOutcomesList.IndexOf(outcome) + 1). Öğrenim Çıktısı:</label>\r\n                        <input @bind=\"outcome.Description\" placeholder=\"Açıklama girin\" />\r\n                    </div>\r\n                }\r\n\r\n                <button @onclick=\"SaveLearningOutcomes\" class=\"save-button\">Kaydet</button>\r\n            </div>\r\n        }\r\n    </div>\r\n\r\n    <h4>LO*PO Matrisi</h4>\r\n    <div class=\"lo-po-matrix\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Program Çıktıları</th>\r\n                    @for (int i = 1; i <= 11; i++)\r\n                    {\r\n                        <th>P@(i)</th>\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (int j = 0; j < learningOutcomesList.Count; j++)\r\n                {\r\n                    <tr>\r\n                        <th>@learningOutcomesList[j].Description</th>\r\n                        @for (int i = 1; i <= 11; i++)\r\n                        {\r\n                            int rowIndex = j;\r\n                            int colIndex = i;\r\n                            var key = $\"P{i}Ö{j+1}\";\r\n                            <td>\r\n                                <input type=\"number\" \r\n                                       value=\"@(GetLoPoValue(key))\"\r\n                                       @onchange=\"@(e => HandleValueChange(e, rowIndex, colIndex))\"\r\n                                       min=\"0\" \r\n                                       max=\"5\" />\r\n                            </td>\r\n                        }\r\n                    </tr>\r\n                }\r\n                <tr class=\"total-row\">\r\n                    <th>Tüm Ortalamalar</th>\r\n                    @for (int i = 1; i <= 11; i++)\r\n                    {\r\n                        <td id=\"total-P@(i)\">0</td>\r\n                    }\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <button @onclick=\"SaveLoPOMatrix\" class=\"save-button\">Matrisi Kaydet</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string CourseCode { get; set; }\r\n\r\n    private List<LearningOutcome> learningOutcomesList = new();\r\n    private Dictionary<string, int> loPoValues = new();\r\n    private Dictionary<int, HashSet<int>> outcomeConnections = new();\r\n    private bool isLearningOutcomesOpen = false;\r\n\r\n    private const int MaxOutcomes = 6;\r\n    private const int MaxValue = 5;\r\n    private const int MaxConnectionsPerOutcome = 4;\r\n\r\n    private bool isMaxOutcomesReached => learningOutcomesList.Count >= MaxOutcomes;\r\n\r\n    protected override async Task OnInitializedAsync()\r\n{\r\n    learningOutcomesList = await _loPoMatrixService.GetLearningOutcomesAsync(CourseCode);\r\n    loPoMatrix = await _loPoMatrixService.GetLoPoMatrixAsync(CourseCode);\r\n}\r\n\r\n\r\n    private async Task LoadLoPoRelations()\r\n    {\r\n        loPoValues.Clear();\r\n        foreach (var outcome in learningOutcomesList)\r\n        {\r\n            var relations = await _context.LoPoRelations\r\n                .Where(r => r.LearningOutcomeId == outcome.Id)\r\n                .ToListAsync();\r\n\r\n            foreach (var relation in relations)\r\n            {\r\n                var outcomeIndex = learningOutcomesList.IndexOf(outcome) + 1;\r\n                var key = $\"P{relation.ProgramOutcome}Ö{outcomeIndex}\";\r\n                loPoValues[key] = relation.Score;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void InitializeLoPoValues()\r\n    {\r\n        loPoValues ??= new Dictionary<string, int>();\r\n        outcomeConnections ??= new Dictionary<int, HashSet<int>>();\r\n\r\n        // Tüm olası kombinasyonları sıfırla\r\n        for (int i = 1; i <= 11; i++)\r\n        {\r\n            for (int j = 1; j <= MaxOutcomes; j++)\r\n            {\r\n                var key = $\"P{i}Ö{j}\";\r\n                if (!loPoValues.ContainsKey(key))\r\n                {\r\n                    loPoValues[key] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bağlantıları sıfırla\r\n        outcomeConnections.Clear();\r\n        for (int i = 0; i < MaxOutcomes; i++)\r\n        {\r\n            outcomeConnections[i] = new HashSet<int>();\r\n        }\r\n    }\r\n\r\n    private int GetLoPoValue(string key) => \r\n        loPoValues.TryGetValue(key, out int value) ? value : 0;\r\n\r\n    private async Task HandleValueChange(ChangeEventArgs e, int rowIndex, int colIndex)\r\n    {\r\n        try\r\n        {\r\n            var newValue = int.TryParse(e.Value?.ToString(), out int value) \r\n                ? Math.Min(value, MaxValue) \r\n                : 0;\r\n\r\n            var key = $\"P{colIndex}Ö{rowIndex + 1}\";\r\n            var oldValue = GetLoPoValue(key);\r\n\r\n            // Bağlantı kontrolleri\r\n            if (!ValidateConnectionRules(rowIndex, colIndex, newValue, oldValue))\r\n                return;\r\n\r\n            // Değeri güncelle\r\n            loPoValues[key] = newValue;\r\n\r\n            // Toplam hesaplamayı tetikle\r\n            await CalculateTotal();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            await HandleError(\"Değer değiştirme hatası\", ex);\r\n        }\r\n    }\r\n\r\n    private bool ValidateConnectionRules(int rowIndex, int colIndex, int newValue, int oldValue)\r\n    {\r\n        if (!outcomeConnections.ContainsKey(rowIndex))\r\n            outcomeConnections[rowIndex] = new HashSet<int>();\r\n\r\n        // Yeni bağlantı ekleniyorsa\r\n        if (newValue > 0 && oldValue == 0)\r\n        {\r\n            if (outcomeConnections[rowIndex].Count >= MaxConnectionsPerOutcome)\r\n            {\r\n                JSRuntime.InvokeVoidAsync(\"alert\", \r\n                    $\"Bir öğrenim çıktısı en fazla {MaxConnectionsPerOutcome} program çıktısı ile eşleşebilir.\");\r\n                return false;\r\n            }\r\n\r\n            outcomeConnections[rowIndex].Add(colIndex);\r\n        }\r\n        // Bağlantı kaldırılıyorsa\r\n        else if (newValue == 0 && oldValue > 0)\r\n        {\r\n            outcomeConnections[rowIndex].Remove(colIndex);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private void AddLearningOutcome()\r\n    {\r\n        if (learningOutcomesList.Count < MaxOutcomes)\r\n        {\r\n            var newOutcome = new LearningOutcome\r\n            {\r\n                Description = $\"Öğrenim çıktısı {learningOutcomesList.Count + 1} açıklaması\",\r\n                CourseCode = CourseCode\r\n            };\r\n            \r\n            learningOutcomesList.Add(newOutcome);\r\n            InitializeLoPoValues(); // Yeni çıktı için değerleri sıfırla\r\n        }\r\n    }\r\n\r\n private async Task SaveLearningOutcomes()\r\n{\r\n    try\r\n    {\r\n        // Veri tabanı işlemleri tamamlanmadan başka bir işlem başlatmayın\r\n        foreach (var outcome in learningOutcomesList)\r\n        {\r\n            if (outcome.Id == 0)\r\n                _context.LearningOutcomes.Add(outcome);\r\n            else\r\n                _context.LearningOutcomes.Update(outcome);\r\n        }\r\n\r\n        await _context.SaveChangesAsync();\r\n        await JSRuntime.InvokeVoidAsync(\"alert\", \"Öğrenim çıktıları başarıyla kaydedildi.\");\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        await HandleError(\"Kaydetme hatası\", ex);\r\n    }\r\n}\r\n\r\n    private async Task CalculateTotal()\r\n    {\r\n        try\r\n        {\r\n            var totals = new int[11];\r\n            for (int i = 1; i <= 11; i++)\r\n            {\r\n                int sum = 0;\r\n                int validOutcomes = 0;\r\n                \r\n                for (int j = 0; j < learningOutcomesList.Count; j++)\r\n                {\r\n                    var key = $\"P{i}Ö{j+1}\";\r\n                    if (loPoValues.ContainsKey(key) && loPoValues[key] > 0)\r\n                    {\r\n                        sum += loPoValues[key];\r\n                        validOutcomes++;\r\n                    }\r\n                }\r\n                \r\n                totals[i - 1] = validOutcomes > 0 \r\n                    ? (int)Math.Round((double)sum / validOutcomes, MidpointRounding.AwayFromZero)\r\n                    : 0;\r\n            }\r\n\r\n            if (JSRuntime != null)\r\n            {\r\n                await JSRuntime.InvokeVoidAsync(\"updateTotals\", totals);\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            await HandleError(\"Toplam hesaplama hatası\", ex);\r\n        }\r\n    }\r\n\r\nprivate async Task SaveLoPOMatrix()\r\n{\r\n    try\r\n    {\r\n        // Mevcut ilişkileri temizle\r\n        var existingRelations = await _context.LoPoRelations\r\n            .Include(r => r.LearningOutcome)\r\n            .Where(r => r.LearningOutcome.CourseCode == CourseCode)\r\n            .ToListAsync();\r\n        \r\n        _context.LoPoRelations.RemoveRange(existingRelations);\r\n\r\n        // Yeni ilişkileri ekle\r\n        for (int j = 0; j < learningOutcomesList.Count; j++)\r\n        {\r\n            for (int i = 1; i <= 11; i++)\r\n            {\r\n                var key = $\"P{i}Ö{j+1}\";\r\n                int score = GetLoPoValue(key);\r\n                \r\n                if (score > 0)\r\n                {\r\n                    var loPoRelation = new LoPoRelation\r\n                    {\r\n                        LearningOutcomeId = learningOutcomesList[j].Id,\r\n                        ProgramOutcome = i,\r\n                        Score = score\r\n                    };\r\n                    _context.LoPoRelations.Add(loPoRelation);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Program Çıktıları Ortalamasını Kaydet\r\n        var lesson = await _context.Lessons\r\n            .Include(l => l.ProgramOutcomes)\r\n            .FirstOrDefaultAsync(l => l.CourseCode == CourseCode);\r\n\r\n        if (lesson != null)\r\n        {\r\n            // ProgramOutcomes var mı, yoksa yeni oluştur\r\n            if (lesson.ProgramOutcomes == null)\r\n            {\r\n                lesson.ProgramOutcomes = new ProgramOutcomes { LessonId = lesson.CourseCode };\r\n                _context.ProgramOutcomes.Add(lesson.ProgramOutcomes);\r\n            }\r\n\r\n            // Toplam hesaplamayı burada yap ve kaydet\r\n            var totals = new int[11];\r\n            for (int i = 1; i <= 11; i++)\r\n            {\r\n                int sum = 0;\r\n                int validOutcomes = 0;\r\n                \r\n                for (int j = 0; j < learningOutcomesList.Count; j++)\r\n                {\r\n                    var key = $\"P{i}Ö{j+1}\";\r\n                    if (loPoValues.ContainsKey(key) && loPoValues[key] > 0)\r\n                    {\r\n                        sum += loPoValues[key];\r\n                        validOutcomes++;\r\n                    }\r\n                }\r\n                \r\n                totals[i - 1] = validOutcomes > 0 \r\n                    ? (int)Math.Round((double)sum / validOutcomes, MidpointRounding.AwayFromZero)\r\n                    : 0;\r\n\r\n                // Dinamik olarak ProgramOutcomes'a set et\r\n                var property = typeof(ProgramOutcomes).GetProperty($\"P{i}\");\r\n                property?.SetValue(lesson.ProgramOutcomes, totals[i - 1]);\r\n            }\r\n\r\n            await _context.SaveChangesAsync();\r\n\r\n            // URL'ye program çıktısı ortalamalarını ekleyerek yönlendir\r\n            var queryParams = totals\r\n                .Select((value, index) => new { Key = $\"P{index + 1}\", Value = value })\r\n                .ToDictionary(x => x.Key, x => x.Value.ToString());\r\n\r\n            queryParams.Add(\"courseCode\", CourseCode);\r\n\r\n            var url = QueryHelpers.AddQueryString(\"/lessons\", queryParams);\r\n            NavigationManager.NavigateTo(url);\r\n        }\r\n\r\n        await _context.SaveChangesAsync();\r\n\r\n        // Verileri yeniden yükle\r\n        await OnInitializedAsync();\r\n\r\n        await JSRuntime.InvokeVoidAsync(\"alert\", \"Değerler başarıyla kaydedildi.\");\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        await HandleError(\"Matris kaydetme hatası\", ex);\r\n    }\r\n}\r\n\r\n    private void ToggleLearningOutcomes() => \r\n        isLearningOutcomesOpen = !isLearningOutcomesOpen;\r\n\r\n    private async Task HandleError(string message, Exception ex)\r\n    {\r\n        Console.Error.WriteLine($\"{message}: {ex.Message}\");\r\n        await JSRuntime.InvokeVoidAsync(\"alert\", $\"{message}: {ex.Message}\");\r\n    }\r\n}"
        }
    ]
}