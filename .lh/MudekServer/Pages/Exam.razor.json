{
    "sourceFile": "MudekServer/Pages/Exam.razor",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1734890692371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734890713446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n \r\n <head>\r\n-    <link rel=\"stylesheet\" href=\"MudekServer\\wwwroot\\css\\Exam.css\">\r\n+    <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n </head>\r\n \r\n <h3>Sınav Girişi</h3>\r\n \r\n"
                },
                {
                    "date": 1734890850284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,10 @@\n \r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n \r\n-<head>\r\n-    <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n-</head>\r\n \r\n+\r\n <h3>Sınav Girişi</h3>\r\n \r\n @if (isLoading)\r\n {\r\n"
                },
                {
                    "date": 1734890861451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,11 @@\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n \r\n \r\n-\r\n+<head>\r\n+    <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n+</head>\r\n <h3>Sınav Girişi</h3>\r\n \r\n @if (isLoading)\r\n {\r\n"
                },
                {
                    "date": 1735079369998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,16 @@\n @inject IJSRuntime JS\r\n @inject LessonService LessonService\r\n @inject SinavTurService SinavTurService\r\n @inject StudentService StudentService\r\n-\r\n+@inject SoruService soruService\r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n \r\n-\r\n <head>\r\n     <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n </head>\r\n+\r\n <h3>Sınav Girişi</h3>\r\n \r\n @if (isLoading)\r\n {\r\n@@ -38,9 +38,9 @@\n         <select @onchange=\"SinavTuruSecildi\">\r\n             <option disabled selected>Bir sınav türü seçin</option>\r\n             @foreach (var sinavTur in SinavTurleri)\r\n             {\r\n-                <option value=\"@sinavTur.Adi\">@sinavTur.Adi</option>\r\n+                <option value=\"@sinavTur.SinavTurId\">@sinavTur.Adi</option>\r\n             }\r\n         </select>\r\n     </div>\r\n \r\n@@ -75,9 +75,9 @@\n                 {\r\n                     <tr>\r\n                         <td>Soru @soru.SoruNumarasi</td>\r\n                         <td>\r\n-                            <input type=\"number\" @bind=\"soru.Puan\" min=\"0\" @oninput=\"CheckTotalPuan\" />\r\n+                            <input type=\"number\" @bind=\"soru.Puan\" min=\"0\" />\r\n                         </td>\r\n                         <td>\r\n                             @foreach (var ogrenimCiktisi in seciliDers.LearningOutcomes)\r\n                             {\r\n@@ -93,8 +93,9 @@\n             </tbody>\r\n         </table>\r\n \r\n         <button @onclick=\"OnNextClick\">Sonraki</button>\r\n+        <button @onclick=\"Kaydet\">Verileri Kaydet</button>\r\n     }\r\n }\r\n \r\n @if (showStudentScores)\r\n@@ -106,9 +107,9 @@\n                 <th>Öğrenci Numarası</th>\r\n                 <th>Öğrenci Adı</th>\r\n                 @foreach (var soru in Sorular)\r\n                 {\r\n-                    <th>Soru @soru.SoruNumarasi</th>\r\n+                    <th>Soru @soru.SoruNumarasi (@soru.Puan puan)</th>\r\n                 }\r\n             </tr>\r\n         </thead>\r\n         <tbody>\r\n@@ -128,43 +129,69 @@\n             }\r\n         </tbody>\r\n     </table>\r\n \r\n-    <button >Kaydet</button>\r\n+    <button @onclick=\"OgrenciNotlariniKaydet\">Notları Kaydet</button>\r\n }\r\n \r\n-\r\n @code {\r\n     private List<Lesson> Dersler = new List<Lesson>();\r\n-    private List<SinavTur> SinavTurleri = new List<SinavTur>(); // Bu listeyi dinamik hale getireceğiz\r\n+    private List<SinavTur> SinavTurleri = new List<SinavTur>();\r\n     private List<Soru> Sorular = new List<Soru>();\r\n     private Lesson seciliDers;\r\n     private SinavTur seciliSinavTur;\r\n     private int soruSayisi;\r\n     private int? sinavYuzdesi;\r\n     private bool isLoading = true;\r\n-    private List<Student> ogrenciler = new List<Student>(); // Öğrenci Listesi\r\n-    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>(); // Öğrenci Notları\r\n-    private Dictionary<int, Dictionary<int, List<string>>> ogrenciOgretimCiktilari = new Dictionary<int, Dictionary<int, List<string>>>(); // Öğrenim çıktıları\r\n+    private List<Student> ogrenciler = new List<Student>();\r\n+    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>();\r\n+    private Dictionary<int, Dictionary<int, List<string>>> OgretimCiktilari = new Dictionary<int, Dictionary<int,\r\n+    List<string>>>();\r\n+    private bool showStudentScores = false;\r\n \r\n-    private bool showStudentScores = false; // Öğrenci notlarını göstermek için kullanılan flag\r\n+    private async Task Kaydet()\r\n+    {\r\n+        try\r\n+        {\r\n+            foreach (var soru in Sorular)\r\n+            {\r\n+                soru.DersId = seciliDers.CourseCode;\r\n+                soru.SinavTuruId = seciliSinavTur.SinavTurId;\r\n+                soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0;\r\n \r\n+                if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n+                {\r\n+                    soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n+                }\r\n+                else\r\n+                {\r\n+                    soru.OgrenimCiktilari = new List<string>();\r\n+                }\r\n+            }\r\n+\r\n+            await soruService.SorulariKaydetAsync(Sorular);\r\n+            await JS.InvokeVoidAsync(\"alert\", \"Sorular başarıyla kaydedildi!\");\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            await JS.InvokeVoidAsync(\"alert\", $\"Hata: {ex.Message}\");\r\n+        }\r\n+    }\r\n+\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n             Dersler = await LessonService.GetLessons();\r\n             ogrenciler = await StudentService.GetStudentsAsync();\r\n-            SinavTurleri = await SinavTurService.GetSinavTurleriAsync(); // SinavTurService üzerinden sınav türlerini alıyoruz\r\n+            SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n             Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n         }\r\n         finally\r\n         {\r\n-            // Yükleme durumu güncelleniyor\r\n             isLoading = false;\r\n             StateHasChanged();\r\n         }\r\n     }\r\n@@ -172,88 +199,131 @@\n     private async void DersSecildi(ChangeEventArgs e)\r\n     {\r\n         if (e.Value != null)\r\n         {\r\n-            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n             seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-            seciliSinavTur = null; // Sınav türünü sıfırlıyoruz\r\n-            Sorular.Clear(); // Soruları sıfırlıyoruz\r\n+            seciliSinavTur = null;\r\n+            Sorular.Clear();\r\n             StateHasChanged();\r\n         }\r\n     }\r\n \r\n     private void SinavTuruSecildi(ChangeEventArgs e)\r\n     {\r\n-        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.Adi == e.Value.ToString());\r\n+        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == Convert.ToInt32(e.Value));\r\n     }\r\n \r\n-    private void SorulariOlustur()\r\n+    private async Task SorulariOlustur()\r\n     {\r\n-        Sorular.Clear();\r\n-        for (int i = 1; i <= soruSayisi; i++)\r\n+        try\r\n         {\r\n-            Sorular.Add(new Soru\r\n+            // Önce mevcut soruları veritabanından çek\r\n+            if (seciliDers != null && seciliSinavTur != null)\r\n             {\r\n-                SoruNumarasi = i,\r\n-                Puan = 0\r\n-            });\r\n-        }\r\n-\r\n-        // Sorular oluşturulduktan sonra, ogrenciNotlar sözlüğünü başlatıyoruz.\r\n-        foreach (var ogrenci in ogrenciler)\r\n-        {\r\n-            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n-            {\r\n-                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n+                var mevcutSorular = await soruService.GetSorularByDersAndSinavAsync(seciliDers.CourseCode, seciliSinavTur.SinavTurId);\r\n+                \r\n+                if (mevcutSorular != null && mevcutSorular.Any())\r\n+                {\r\n+                    Sorular = mevcutSorular.ToList();\r\n+                    soruSayisi = Sorular.Count;\r\n+                }\r\n+                else\r\n+                {\r\n+                    // Eğer veritabanında soru yoksa yeni sorular oluştur\r\n+                    Sorular.Clear();\r\n+                    for (int i = 1; i <= soruSayisi; i++)\r\n+                    {\r\n+                        Sorular.Add(new Soru\r\n+                            {\r\n+                                SoruNumarasi = i,\r\n+                                Puan = 0\r\n+                            });\r\n+                    }\r\n+                }\r\n             }\r\n \r\n-            foreach (var soru in Sorular)\r\n+            foreach (var ogrenci in ogrenciler)\r\n             {\r\n-                // Her öğrenci ve her soru için puan başlatıyoruz (sıfır).\r\n-                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n+                if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n                 {\r\n-                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n+                    ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n                 }\r\n+\r\n+                foreach (var soru in Sorular)\r\n+                {\r\n+                    if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n+                    {\r\n+                        ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n+                    }\r\n+                }\r\n             }\r\n+            \r\n+            StateHasChanged();\r\n         }\r\n+        catch (Exception ex)\r\n+        {\r\n+            await JS.InvokeVoidAsync(\"alert\", $\"Sorular oluşturulurken hata: {ex.Message}\");\r\n+        }\r\n     }\r\n \r\n-    private void CheckTotalPuan()\r\n-    {\r\n-        // Toplam puan hesaplaması\r\n-    }\r\n-\r\n     private async Task OnNextClick()\r\n     {\r\n-        // Geçiş işlemi\r\n-        showStudentScores = true; // Öğrenci notlarını göstermek için flag'yi true yapıyoruz.\r\n+        try\r\n+        {\r\n+            // Soruları tekrar veritabanından çek\r\n+            if (seciliDers != null && seciliSinavTur != null)\r\n+            {\r\n+                var guncelSorular = await soruService.GetSorularByDersAndSinavAsync(seciliDers.CourseCode, seciliSinavTur.SinavTurId);\r\n+                if (guncelSorular != null && guncelSorular.Any())\r\n+                {\r\n+                    Sorular = guncelSorular.ToList();\r\n+                }\r\n+            }\r\n+            showStudentScores = true;\r\n+            StateHasChanged();\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            await JS.InvokeVoidAsync(\"alert\", $\"Hata: {ex.Message}\");\r\n+        }\r\n     }\r\n \r\n-    // OgrenimCiktisiSecildi metodu\r\n     private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n     {\r\n-        if ((bool)e.Value) // Eğer checkbox seçili ise\r\n+        if ((bool)e.Value)\r\n         {\r\n-            // Öğrenim çıktısını ekle\r\n-            if (!ogrenciOgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n+            if (!OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n             {\r\n-                ogrenciOgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();\r\n+                OgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();\r\n             }\r\n \r\n             foreach (var ogrenci in ogrenciler)\r\n             {\r\n-                if (!ogrenciOgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))\r\n+                if (!OgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))\r\n                 {\r\n-                    ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();\r\n+                    OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();\r\n                 }\r\n-                ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);\r\n+                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);\r\n             }\r\n         }\r\n-        else // Eğer checkbox seçimi kaldırıldıysa\r\n+        else\r\n         {\r\n             foreach (var ogrenci in ogrenciler)\r\n             {\r\n-                ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n+                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n             }\r\n         }\r\n     }\r\n-}\r\n+\r\n+    private async Task OgrenciNotlariniKaydet()\r\n+    {\r\n+        try\r\n+        {\r\n+            // Notları kaydetme işlemi burada implement edilecek\r\n+            await JS.InvokeVoidAsync(\"alert\", \"Öğrenci notları başarıyla kaydedildi!\");\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            await JS.InvokeVoidAsync(\"alert\", $\"Notlar kaydedilirken hata: {ex.Message}\");\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735079386661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n         <button @onclick=\"Kaydet\">Verileri Kaydet</button>\r\n     }\r\n }\r\n \r\n+\r\n @if (showStudentScores)\r\n {\r\n     <h4>Öğrenci Notları</h4>\r\n     <table class=\"table\">\r\n@@ -107,9 +108,9 @@\n                 <th>Öğrenci Numarası</th>\r\n                 <th>Öğrenci Adı</th>\r\n                 @foreach (var soru in Sorular)\r\n                 {\r\n-                    <th>Soru @soru.SoruNumarasi (@soru.Puan puan)</th>\r\n+                    <th>Soru @soru.SoruNumarasi</th>\r\n                 }\r\n             </tr>\r\n         </thead>\r\n         <tbody>\r\n@@ -129,9 +130,9 @@\n             }\r\n         </tbody>\r\n     </table>\r\n \r\n-    <button @onclick=\"OgrenciNotlariniKaydet\">Notları Kaydet</button>\r\n+    <button>Kaydet</button>\r\n }\r\n \r\n @code {\r\n     private List<Lesson> Dersler = new List<Lesson>();\r\n@@ -148,40 +149,47 @@\n     List<string>>>();\r\n     private bool showStudentScores = false;\r\n \r\n     private async Task Kaydet()\r\n+{\r\n+    try\r\n     {\r\n-        try\r\n+        // DersId, SinavTurId ve SinavYuzdesi'yi sorulara ekle\r\n+        foreach (var soru in Sorular)\r\n         {\r\n-            foreach (var soru in Sorular)\r\n+            soru.DersId = seciliDers.CourseCode; // CourseCode, Lesson tablosundan alınıyor\r\n+            soru.SinavTuruId = seciliSinavTur.SinavTurId; // SinavTurId, SinavTur tablosundan alınıyor\r\n+            soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0; // SinavYuzdesi kaydediliyor\r\n+\r\n+            // Sorulara ait olan öğrenim çıktılarının alınması\r\n+            if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n             {\r\n-                soru.DersId = seciliDers.CourseCode;\r\n-                soru.SinavTuruId = seciliSinavTur.SinavTurId;\r\n-                soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0;\r\n-\r\n-                if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n-                {\r\n-                    soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n-                }\r\n-                else\r\n-                {\r\n-                    soru.OgrenimCiktilari = new List<string>();\r\n-                }\r\n+                // O soruya ait öğrenim çıktıları alınıyor\r\n+                soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n             }\r\n+            else\r\n+            {\r\n+                // Öğrenim çıktısı yoksa boş bir liste atanır\r\n+                soru.OgrenimCiktilari = new List<string>();\r\n+            }\r\n+        }\r\n \r\n-            await soruService.SorulariKaydetAsync(Sorular);\r\n-            await JS.InvokeVoidAsync(\"alert\", \"Sorular başarıyla kaydedildi!\");\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            await JS.InvokeVoidAsync(\"alert\", $\"Hata: {ex.Message}\");\r\n-        }\r\n+        await soruService.SorulariKaydetAsync(Sorular); // Veritabanına kaydet\r\n+        Console.WriteLine(\"Sorular başarıyla kaydedildi!\");\r\n     }\r\n+    catch (Exception ex)\r\n+    {\r\n+        Console.WriteLine($\"Hata: {ex.Message}\");\r\n+    }\r\n+}\r\n \r\n+\r\n+\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n+            // Dersleri, sınav türlerini ve öğrencileri asenkron olarak yükle\r\n             Dersler = await LessonService.GetLessons();\r\n             ogrenciler = await StudentService.GetStudentsAsync();\r\n             SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n         }\r\n@@ -200,10 +208,10 @@\n     {\r\n         if (e.Value != null)\r\n         {\r\n             seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-            seciliSinavTur = null;\r\n-            Sorular.Clear();\r\n+            seciliSinavTur = null; // Sınav türünü sıfırlıyoruz\r\n+            Sorular.Clear(); // Soruları sıfırlıyoruz\r\n             StateHasChanged();\r\n         }\r\n     }\r\n \r\n@@ -211,81 +219,45 @@\n     {\r\n         seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == Convert.ToInt32(e.Value));\r\n     }\r\n \r\n-    private async Task SorulariOlustur()\r\n+    private void SorulariOlustur()\r\n     {\r\n-        try\r\n+        Sorular.Clear();\r\n+        for (int i = 1; i <= soruSayisi; i++)\r\n         {\r\n-            // Önce mevcut soruları veritabanından çek\r\n-            if (seciliDers != null && seciliSinavTur != null)\r\n+            Sorular.Add(new Soru\r\n+                {\r\n+                    SoruNumarasi = i,\r\n+                    Puan = 0\r\n+                });\r\n+        }\r\n+\r\n+        foreach (var ogrenci in ogrenciler)\r\n+        {\r\n+            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n             {\r\n-                var mevcutSorular = await soruService.GetSorularByDersAndSinavAsync(seciliDers.CourseCode, seciliSinavTur.SinavTurId);\r\n-                \r\n-                if (mevcutSorular != null && mevcutSorular.Any())\r\n-                {\r\n-                    Sorular = mevcutSorular.ToList();\r\n-                    soruSayisi = Sorular.Count;\r\n-                }\r\n-                else\r\n-                {\r\n-                    // Eğer veritabanında soru yoksa yeni sorular oluştur\r\n-                    Sorular.Clear();\r\n-                    for (int i = 1; i <= soruSayisi; i++)\r\n-                    {\r\n-                        Sorular.Add(new Soru\r\n-                            {\r\n-                                SoruNumarasi = i,\r\n-                                Puan = 0\r\n-                            });\r\n-                    }\r\n-                }\r\n+                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n             }\r\n \r\n-            foreach (var ogrenci in ogrenciler)\r\n+            foreach (var soru in Sorular)\r\n             {\r\n-                if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n+                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n                 {\r\n-                    ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n+                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n                 }\r\n-\r\n-                foreach (var soru in Sorular)\r\n-                {\r\n-                    if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n-                    {\r\n-                        ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n-                    }\r\n-                }\r\n             }\r\n-            \r\n-            StateHasChanged();\r\n         }\r\n-        catch (Exception ex)\r\n-        {\r\n-            await JS.InvokeVoidAsync(\"alert\", $\"Sorular oluşturulurken hata: {ex.Message}\");\r\n-        }\r\n     }\r\n \r\n+    private void CheckTotalPuan()\r\n+    {\r\n+        // Toplam puan hesaplaması\r\n+    }\r\n+\r\n     private async Task OnNextClick()\r\n     {\r\n-        try\r\n-        {\r\n-            // Soruları tekrar veritabanından çek\r\n-            if (seciliDers != null && seciliSinavTur != null)\r\n-            {\r\n-                var guncelSorular = await soruService.GetSorularByDersAndSinavAsync(seciliDers.CourseCode, seciliSinavTur.SinavTurId);\r\n-                if (guncelSorular != null && guncelSorular.Any())\r\n-                {\r\n-                    Sorular = guncelSorular.ToList();\r\n-                }\r\n-            }\r\n-            showStudentScores = true;\r\n-            StateHasChanged();\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            await JS.InvokeVoidAsync(\"alert\", $\"Hata: {ex.Message}\");\r\n-        }\r\n+        showStudentScores = true; // Öğrenci notlarını göstermek için flag'yi true yapıyoruz.\r\n     }\r\n \r\n     private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n     {\r\n@@ -312,18 +284,5 @@\n                 OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n             }\r\n         }\r\n     }\r\n-\r\n-    private async Task OgrenciNotlariniKaydet()\r\n-    {\r\n-        try\r\n-        {\r\n-            // Notları kaydetme işlemi burada implement edilecek\r\n-            await JS.InvokeVoidAsync(\"alert\", \"Öğrenci notları başarıyla kaydedildi!\");\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            await JS.InvokeVoidAsync(\"alert\", $\"Notlar kaydedilirken hata: {ex.Message}\");\r\n-        }\r\n-    }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1735079417304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,8 @@\n         <button @onclick=\"Kaydet\">Verileri Kaydet</button>\r\n     }\r\n }\r\n \r\n-\r\n @if (showStudentScores)\r\n {\r\n     <h4>Öğrenci Notları</h4>\r\n     <table class=\"table\">\r\n@@ -108,9 +107,9 @@\n                 <th>Öğrenci Numarası</th>\r\n                 <th>Öğrenci Adı</th>\r\n                 @foreach (var soru in Sorular)\r\n                 {\r\n-                    <th>Soru @soru.SoruNumarasi</th>\r\n+                    <th>Soru @soru.SoruNumarasi (@soru.Puan) Puan</th>\r\n                 }\r\n             </tr>\r\n         </thead>\r\n         <tbody>\r\n@@ -149,47 +148,40 @@\n     List<string>>>();\r\n     private bool showStudentScores = false;\r\n \r\n     private async Task Kaydet()\r\n-{\r\n-    try\r\n     {\r\n-        // DersId, SinavTurId ve SinavYuzdesi'yi sorulara ekle\r\n-        foreach (var soru in Sorular)\r\n+        try\r\n         {\r\n-            soru.DersId = seciliDers.CourseCode; // CourseCode, Lesson tablosundan alınıyor\r\n-            soru.SinavTuruId = seciliSinavTur.SinavTurId; // SinavTurId, SinavTur tablosundan alınıyor\r\n-            soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0; // SinavYuzdesi kaydediliyor\r\n+            foreach (var soru in Sorular)\r\n+            {\r\n+                soru.DersId = seciliDers.CourseCode;\r\n+                soru.SinavTuruId = seciliSinavTur.SinavTurId;\r\n+                soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0;\r\n \r\n-            // Sorulara ait olan öğrenim çıktılarının alınması\r\n-            if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n-            {\r\n-                // O soruya ait öğrenim çıktıları alınıyor\r\n-                soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n+                if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n+                {\r\n+                    soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n+                }\r\n+                else\r\n+                {\r\n+                    soru.OgrenimCiktilari = new List<string>();\r\n+                }\r\n             }\r\n-            else\r\n-            {\r\n-                // Öğrenim çıktısı yoksa boş bir liste atanır\r\n-                soru.OgrenimCiktilari = new List<string>();\r\n-            }\r\n+\r\n+            await soruService.SorulariKaydetAsync(Sorular);\r\n+            Console.WriteLine(\"Sorular başarıyla kaydedildi!\");\r\n         }\r\n-\r\n-        await soruService.SorulariKaydetAsync(Sorular); // Veritabanına kaydet\r\n-        Console.WriteLine(\"Sorular başarıyla kaydedildi!\");\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.WriteLine($\"Hata: {ex.Message}\");\r\n+        }\r\n     }\r\n-    catch (Exception ex)\r\n-    {\r\n-        Console.WriteLine($\"Hata: {ex.Message}\");\r\n-    }\r\n-}\r\n \r\n-\r\n-\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n         try\r\n         {\r\n-            // Dersleri, sınav türlerini ve öğrencileri asenkron olarak yükle\r\n             Dersler = await LessonService.GetLessons();\r\n             ogrenciler = await StudentService.GetStudentsAsync();\r\n             SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n         }\r\n@@ -208,10 +200,10 @@\n     {\r\n         if (e.Value != null)\r\n         {\r\n             seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-            seciliSinavTur = null; // Sınav türünü sıfırlıyoruz\r\n-            Sorular.Clear(); // Soruları sıfırlıyoruz\r\n+            seciliSinavTur = null;\r\n+            Sorular.Clear();\r\n             StateHasChanged();\r\n         }\r\n     }\r\n \r\n@@ -248,16 +240,11 @@\n             }\r\n         }\r\n     }\r\n \r\n-    private void CheckTotalPuan()\r\n-    {\r\n-        // Toplam puan hesaplaması\r\n-    }\r\n-\r\n     private async Task OnNextClick()\r\n     {\r\n-        showStudentScores = true; // Öğrenci notlarını göstermek için flag'yi true yapıyoruz.\r\n+        showStudentScores = true;\r\n     }\r\n \r\n     private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n     {\r\n"
                },
                {
                    "date": 1735079975446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,8 @@\n @inject SoruService soruService\r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n \r\n-<head>\r\n-    <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n-</head>\r\n-\r\n <h3>Sınav Girişi</h3>\r\n \r\n @if (isLoading)\r\n {\r\n@@ -92,10 +88,10 @@\n                 }\r\n             </tbody>\r\n         </table>\r\n \r\n+        <button @onclick=\"SaveQuestions\">Soruları Kaydet</button>\r\n         <button @onclick=\"OnNextClick\">Sonraki</button>\r\n-        <button @onclick=\"Kaydet\">Verileri Kaydet</button>\r\n     }\r\n }\r\n \r\n @if (showStudentScores)\r\n@@ -107,9 +103,9 @@\n                 <th>Öğrenci Numarası</th>\r\n                 <th>Öğrenci Adı</th>\r\n                 @foreach (var soru in Sorular)\r\n                 {\r\n-                    <th>Soru @soru.SoruNumarasi (@soru.Puan) Puan</th>\r\n+                    <th>Soru @soru.SoruNumarasi</th>\r\n                 }\r\n             </tr>\r\n         </thead>\r\n         <tbody>\r\n@@ -120,156 +116,76 @@\n                     <td>@ogrenci.Isim @ogrenci.Soyisim</td>\r\n                     @foreach (var soru in Sorular)\r\n                     {\r\n                         <td>\r\n-                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" placeholder=\"Not girin\"\r\n+                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" \r\n                                 min=\"0\" max=\"@soru.Puan\" /> / @soru.Puan\r\n                         </td>\r\n                     }\r\n                 </tr>\r\n             }\r\n         </tbody>\r\n     </table>\r\n \r\n-    <button>Kaydet</button>\r\n+    <button @onclick=\"SaveStudentScores\">Notları Kaydet</button>\r\n }\r\n \r\n @code {\r\n-    private List<Lesson> Dersler = new List<Lesson>();\r\n-    private List<SinavTur> SinavTurleri = new List<SinavTur>();\r\n-    private List<Soru> Sorular = new List<Soru>();\r\n+    private List<Lesson> Dersler = new();\r\n+    private List<SinavTur> SinavTurleri = new();\r\n+    private List<Soru> Sorular = new();\r\n     private Lesson seciliDers;\r\n     private SinavTur seciliSinavTur;\r\n     private int soruSayisi;\r\n     private int? sinavYuzdesi;\r\n     private bool isLoading = true;\r\n-    private List<Student> ogrenciler = new List<Student>();\r\n-    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>();\r\n-    private Dictionary<int, Dictionary<int, List<string>>> OgretimCiktilari = new Dictionary<int, Dictionary<int,\r\n-    List<string>>>();\r\n+    private List<Student> ogrenciler = new();\r\n+    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new();\r\n     private bool showStudentScores = false;\r\n \r\n-    private async Task Kaydet()\r\n-    {\r\n-        try\r\n-        {\r\n-            foreach (var soru in Sorular)\r\n-            {\r\n-                soru.DersId = seciliDers.CourseCode;\r\n-                soru.SinavTuruId = seciliSinavTur.SinavTurId;\r\n-                soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0;\r\n-\r\n-                if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n-                {\r\n-                    soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n-                }\r\n-                else\r\n-                {\r\n-                    soru.OgrenimCiktilari = new List<string>();\r\n-                }\r\n-            }\r\n-\r\n-            await soruService.SorulariKaydetAsync(Sorular);\r\n-            Console.WriteLine(\"Sorular başarıyla kaydedildi!\");\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.WriteLine($\"Hata: {ex.Message}\");\r\n-        }\r\n-    }\r\n-\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons();\r\n-            ogrenciler = await StudentService.GetStudentsAsync();\r\n-            SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n-        }\r\n-        finally\r\n-        {\r\n-            isLoading = false;\r\n-            StateHasChanged();\r\n-        }\r\n+        Dersler = await LessonService.GetLessons();\r\n+        SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n+        ogrenciler = await StudentService.GetStudentsAsync();\r\n+        isLoading = false;\r\n     }\r\n \r\n-    private async void DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        if (e.Value != null)\r\n-        {\r\n-            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-            seciliSinavTur = null;\r\n-            Sorular.Clear();\r\n-            StateHasChanged();\r\n-        }\r\n-    }\r\n-\r\n-    private void SinavTuruSecildi(ChangeEventArgs e)\r\n-    {\r\n-        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == Convert.ToInt32(e.Value));\r\n-    }\r\n-\r\n     private void SorulariOlustur()\r\n     {\r\n         Sorular.Clear();\r\n         for (int i = 1; i <= soruSayisi; i++)\r\n         {\r\n             Sorular.Add(new Soru\r\n-                {\r\n-                    SoruNumarasi = i,\r\n-                    Puan = 0\r\n-                });\r\n-        }\r\n-\r\n-        foreach (var ogrenci in ogrenciler)\r\n-        {\r\n-            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n             {\r\n-                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n-            }\r\n-\r\n-            foreach (var soru in Sorular)\r\n-            {\r\n-                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n-                {\r\n-                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n-                }\r\n-            }\r\n+                SoruNumarasi = i,\r\n+                Puan = 0,\r\n+                DersId = seciliDers.CourseCode,\r\n+                SinavTuruId = seciliSinavTur.SinavTurId\r\n+            });\r\n         }\r\n     }\r\n \r\n-    private async Task OnNextClick()\r\n+    private async Task SaveQuestions()\r\n     {\r\n-        showStudentScores = true;\r\n+        await soruService.SorulariKaydetAsync(Sorular);\r\n+        Console.WriteLine(\"Sorular kaydedildi.\");\r\n     }\r\n \r\n-    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n+    private async Task SaveStudentScores()\r\n     {\r\n-        if ((bool)e.Value)\r\n-        {\r\n-            if (!OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n+        var scores = ogrenciler.SelectMany(ogrenci =>\r\n+            Sorular.Select(soru => new StudentScore\r\n             {\r\n-                OgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();\r\n-            }\r\n+                StudentId = ogrenci.Id,\r\n+                DersId = seciliDers.CourseCode,\r\n+                SinavTuruId = seciliSinavTur.SinavTurId,\r\n+                QuestionNumber = soru.SoruNumarasi,\r\n+                Score = ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi],\r\n+                MaxScore = soru.Puan\r\n+            })\r\n+        ).ToList();\r\n \r\n-            foreach (var ogrenci in ogrenciler)\r\n-            {\r\n-                if (!OgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))\r\n-                {\r\n-                    OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();\r\n-                }\r\n-                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);\r\n-            }\r\n-        }\r\n-        else\r\n-        {\r\n-            foreach (var ogrenci in ogrenciler)\r\n-            {\r\n-                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n-            }\r\n-        }\r\n+        await StudentService.SaveStudentScoresAsync(scores);\r\n+        Console.WriteLine(\"Öğrenci notları kaydedildi.\");\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1735079999704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,12 @@\n @inject SoruService soruService\r\n @using MudekServer.Models\r\n @using MudekServer.Services\r\n \r\n+<head>\r\n+    <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n+</head>\r\n+\r\n <h3>Sınav Girişi</h3>\r\n \r\n @if (isLoading)\r\n {\r\n@@ -88,10 +92,10 @@\n                 }\r\n             </tbody>\r\n         </table>\r\n \r\n-        <button @onclick=\"SaveQuestions\">Soruları Kaydet</button>\r\n         <button @onclick=\"OnNextClick\">Sonraki</button>\r\n+        <button @onclick=\"Kaydet\">Verileri Kaydet</button>\r\n     }\r\n }\r\n \r\n @if (showStudentScores)\r\n@@ -103,9 +107,9 @@\n                 <th>Öğrenci Numarası</th>\r\n                 <th>Öğrenci Adı</th>\r\n                 @foreach (var soru in Sorular)\r\n                 {\r\n-                    <th>Soru @soru.SoruNumarasi</th>\r\n+                    <th>Soru @soru.SoruNumarasi (@soru.Puan) Puan</th>\r\n                 }\r\n             </tr>\r\n         </thead>\r\n         <tbody>\r\n@@ -116,76 +120,156 @@\n                     <td>@ogrenci.Isim @ogrenci.Soyisim</td>\r\n                     @foreach (var soru in Sorular)\r\n                     {\r\n                         <td>\r\n-                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" \r\n+                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" placeholder=\"Not girin\"\r\n                                 min=\"0\" max=\"@soru.Puan\" /> / @soru.Puan\r\n                         </td>\r\n                     }\r\n                 </tr>\r\n             }\r\n         </tbody>\r\n     </table>\r\n \r\n-    <button @onclick=\"SaveStudentScores\">Notları Kaydet</button>\r\n+    <button>Kaydet</button>\r\n }\r\n \r\n @code {\r\n-    private List<Lesson> Dersler = new();\r\n-    private List<SinavTur> SinavTurleri = new();\r\n-    private List<Soru> Sorular = new();\r\n+    private List<Lesson> Dersler = new List<Lesson>();\r\n+    private List<SinavTur> SinavTurleri = new List<SinavTur>();\r\n+    private List<Soru> Sorular = new List<Soru>();\r\n     private Lesson seciliDers;\r\n     private SinavTur seciliSinavTur;\r\n     private int soruSayisi;\r\n     private int? sinavYuzdesi;\r\n     private bool isLoading = true;\r\n-    private List<Student> ogrenciler = new();\r\n-    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new();\r\n+    private List<Student> ogrenciler = new List<Student>();\r\n+    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>();\r\n+    private Dictionary<int, Dictionary<int, List<string>>> OgretimCiktilari = new Dictionary<int, Dictionary<int,\r\n+    List<string>>>();\r\n     private bool showStudentScores = false;\r\n \r\n+    private async Task Kaydet()\r\n+    {\r\n+        try\r\n+        {\r\n+            foreach (var soru in Sorular)\r\n+            {\r\n+                soru.DersId = seciliDers.CourseCode;\r\n+                soru.SinavTuruId = seciliSinavTur.SinavTurId;\r\n+                soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0;\r\n+\r\n+                if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n+                {\r\n+                    soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n+                }\r\n+                else\r\n+                {\r\n+                    soru.OgrenimCiktilari = new List<string>();\r\n+                }\r\n+            }\r\n+\r\n+            await soruService.SorulariKaydetAsync(Sorular);\r\n+            Console.WriteLine(\"Sorular başarıyla kaydedildi!\");\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.WriteLine($\"Hata: {ex.Message}\");\r\n+        }\r\n+    }\r\n+\r\n     protected override async Task OnInitializedAsync()\r\n     {\r\n-        Dersler = await LessonService.GetLessons();\r\n-        SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n-        ogrenciler = await StudentService.GetStudentsAsync();\r\n-        isLoading = false;\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons();\r\n+            ogrenciler = await StudentService.GetStudentsAsync();\r\n+            SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n+        }\r\n+        catch (Exception ex)\r\n+        {\r\n+            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n+        }\r\n+        finally\r\n+        {\r\n+            isLoading = false;\r\n+            StateHasChanged();\r\n+        }\r\n     }\r\n \r\n+    private async void DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        if (e.Value != null)\r\n+        {\r\n+            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n+            seciliSinavTur = null;\r\n+            Sorular.Clear();\r\n+            StateHasChanged();\r\n+        }\r\n+    }\r\n+\r\n+    private void SinavTuruSecildi(ChangeEventArgs e)\r\n+    {\r\n+        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == Convert.ToInt32(e.Value));\r\n+    }\r\n+\r\n     private void SorulariOlustur()\r\n     {\r\n         Sorular.Clear();\r\n         for (int i = 1; i <= soruSayisi; i++)\r\n         {\r\n             Sorular.Add(new Soru\r\n+                {\r\n+                    SoruNumarasi = i,\r\n+                    Puan = 0\r\n+                });\r\n+        }\r\n+\r\n+        foreach (var ogrenci in ogrenciler)\r\n+        {\r\n+            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n             {\r\n-                SoruNumarasi = i,\r\n-                Puan = 0,\r\n-                DersId = seciliDers.CourseCode,\r\n-                SinavTuruId = seciliSinavTur.SinavTurId\r\n-            });\r\n+                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n+            }\r\n+\r\n+            foreach (var soru in Sorular)\r\n+            {\r\n+                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n+                {\r\n+                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n+                }\r\n+            }\r\n         }\r\n     }\r\n \r\n-    private async Task SaveQuestions()\r\n+    private async Task OnNextClick()\r\n     {\r\n-        await soruService.SorulariKaydetAsync(Sorular);\r\n-        Console.WriteLine(\"Sorular kaydedildi.\");\r\n+        showStudentScores = true;\r\n     }\r\n \r\n-    private async Task SaveStudentScores()\r\n+    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n     {\r\n-        var scores = ogrenciler.SelectMany(ogrenci =>\r\n-            Sorular.Select(soru => new StudentScore\r\n+        if ((bool)e.Value)\r\n+        {\r\n+            if (!OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n             {\r\n-                StudentId = ogrenci.Id,\r\n-                DersId = seciliDers.CourseCode,\r\n-                SinavTuruId = seciliSinavTur.SinavTurId,\r\n-                QuestionNumber = soru.SoruNumarasi,\r\n-                Score = ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi],\r\n-                MaxScore = soru.Puan\r\n-            })\r\n-        ).ToList();\r\n+                OgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();\r\n+            }\r\n \r\n-        await StudentService.SaveStudentScoresAsync(scores);\r\n-        Console.WriteLine(\"Öğrenci notları kaydedildi.\");\r\n+            foreach (var ogrenci in ogrenciler)\r\n+            {\r\n+                if (!OgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))\r\n+                {\r\n+                    OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();\r\n+                }\r\n+                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);\r\n+            }\r\n+        }\r\n+        else\r\n+        {\r\n+            foreach (var ogrenci in ogrenciler)\r\n+            {\r\n+                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n+            }\r\n+        }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1735080153674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+@page \"/sinav-girisi\"\r\n+@inject IJSRuntime JS\r\n+@inject LessonService LessonService\r\n+@inject SinavTurService SinavTurService\r\n+@inject StudentService StudentService\r\n+@inject SoruService SoruService\r\n+@using MudekServer.Models\r\n+@using MudekServer.Services\r\n+\r\n+<h3>Sınav Girişi</h3>\r\n+\r\n+@if (isLoading)\r\n+{\r\n+    <p>Veriler yükleniyor...</p>\r\n+}\r\n+else\r\n+{\r\n+    <div class=\"form-group\">\r\n+        <label for=\"dersSecim\">Ders Seçin:</label>\r\n+        <select @onchange=\"DersSecildi\">\r\n+            <option disabled selected>Bir ders seçin</option>\r\n+            @foreach (var ders in Dersler)\r\n+            {\r\n+                <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n+            }\r\n+        </select>\r\n+    </div>\r\n+}\r\n+\r\n+@if (seciliDers != null)\r\n+{\r\n+    <div class=\"form-group\">\r\n+        <label for=\"sinavSecim\">Sınav Türü Seçin:</label>\r\n+        <select @onchange=\"SinavTuruSecildi\">\r\n+            <option disabled selected>Bir sınav türü seçin</option>\r\n+            @foreach (var sinavTur in SinavTurleri)\r\n+            {\r\n+                <option value=\"@sinavTur.SinavTurId\">@sinavTur.Adi</option>\r\n+            }\r\n+        </select>\r\n+    </div>\r\n+\r\n+    <div class=\"form-group\">\r\n+        <label for=\"sinavYuzdesi\">Sınav Yüzdesi:</label>\r\n+        <input type=\"number\" @bind=\"sinavYuzdesi\" min=\"0\" max=\"100\" />\r\n+    </div>\r\n+}\r\n+\r\n+@if (seciliSinavTur != null && sinavYuzdesi.HasValue)\r\n+{\r\n+    <div class=\"form-group\">\r\n+        <label for=\"soruSayisi\">Soru Sayısı:</label>\r\n+        <input type=\"number\" @bind=\"soruSayisi\" min=\"1\" />\r\n+    </div>\r\n+    <button @onclick=\"SorulariOlustur\">Soruları Oluştur</button>\r\n+\r\n+    @if (Sorular.Any())\r\n+    {\r\n+        <h4>Soru Listesi</h4>\r\n+        <table class=\"table\">\r\n+            <thead>\r\n+                <tr>\r\n+                    <th>Soru</th>\r\n+                    <th>Puan</th>\r\n+                    <th>Öğrenim Çıktıları</th>\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                @foreach (var soru in Sorular)\r\n+                {\r\n+                    <tr>\r\n+                        <td>Soru @soru.SoruNumarasi</td>\r\n+                        <td>\r\n+                            <input type=\"number\" @bind=\"soru.Puan\" min=\"0\" />\r\n+                        </td>\r\n+                        <td>\r\n+                            @foreach (var ogrenimCiktisi in seciliDers.LearningOutcomes)\r\n+                            {\r\n+                                <label>\r\n+                                    <input type=\"checkbox\" value=\"@ogrenimCiktisi.Description\" \r\n+                                        @onchange=\"@(e => OgrenimCiktisiSecildi(soru, ogrenimCiktisi.Description, e))\" />\r\n+                                    @ogrenimCiktisi.Description\r\n+                                </label>\r\n+                            }\r\n+                        </td>\r\n+                    </tr>\r\n+                }\r\n+            </tbody>\r\n+        </table>\r\n+\r\n+        <button @onclick=\"OnNextClick\">Sonraki</button>\r\n+        <button @onclick=\"Kaydet\">Soruları Kaydet</button>\r\n+    }\r\n+}\r\n+\r\n+@if (showStudentScores)\r\n+{\r\n+    <h4>Öğrenci Notları</h4>\r\n+    <table class=\"table\">\r\n+        <thead>\r\n+            <tr>\r\n+                <th>Öğrenci Numarası</th>\r\n+                <th>Öğrenci Adı</th>\r\n+                @foreach (var soru in Sorular)\r\n+                {\r\n+                    <th>Soru @soru.SoruNumarasi (@soru.Puan) Puan</th>\r\n+                }\r\n+            </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+            @foreach (var ogrenci in ogrenciler)\r\n+            {\r\n+                <tr>\r\n+                    <td>@ogrenci.Numara</td>\r\n+                    <td>@ogrenci.Isim @ogrenci.Soyisim</td>\r\n+                    @foreach (var soru in Sorular)\r\n+                    {\r\n+                        <td>\r\n+                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" \r\n+                                min=\"0\" max=\"@soru.Puan\" /> / @soru.Puan\r\n+                        </td>\r\n+                    }\r\n+                </tr>\r\n+            }\r\n+        </tbody>\r\n+    </table>\r\n+\r\n+    <button @onclick=\"KaydetOgrenciNotlari\">Notları Kaydet</button>\r\n+}\r\n+\r\n+@code {\r\n+    private List<Lesson> Dersler = new();\r\n+    private List<SinavTur> SinavTurleri = new();\r\n+    private List<Soru> Sorular = new();\r\n+    private Lesson seciliDers;\r\n+    private SinavTur seciliSinavTur;\r\n+    private int soruSayisi;\r\n+    private int? sinavYuzdesi;\r\n+    private bool isLoading = true;\r\n+    private List<Student> ogrenciler = new();\r\n+    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new();\r\n+    private Dictionary<int, List<string>> OgrenimCiktilari = new();\r\n+    private bool showStudentScores = false;\r\n+\r\n+    protected override async Task OnInitializedAsync()\r\n+    {\r\n+        try\r\n+        {\r\n+            Dersler = await LessonService.GetLessons();\r\n+            SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n+            ogrenciler = await StudentService.GetStudentsAsync();\r\n+        }\r\n+        finally\r\n+        {\r\n+            isLoading = false;\r\n+        }\r\n+    }\r\n+\r\n+    private void DersSecildi(ChangeEventArgs e)\r\n+    {\r\n+        seciliDers = Dersler.FirstOrDefault(d => d.CourseCode == e.Value.ToString());\r\n+        seciliSinavTur = null;\r\n+        Sorular.Clear();\r\n+    }\r\n+\r\n+    private void SinavTuruSecildi(ChangeEventArgs e)\r\n+    {\r\n+        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == int.Parse(e.Value.ToString()));\r\n+    }\r\n+\r\n+    private void SorulariOlustur()\r\n+    {\r\n+        Sorular.Clear();\r\n+        for (int i = 1; i <= soruSayisi; i++)\r\n+        {\r\n+            Sorular.Add(new Soru { SoruNumarasi = i, DersId = seciliDers.CourseCode, SinavTuruId = seciliSinavTur.SinavTurId });\r\n+        }\r\n+    }\r\n+\r\n+    private async Task Kaydet()\r\n+    {\r\n+        await SoruService.SorulariKaydetAsync(Sorular);\r\n+        Console.WriteLine(\"Sorular kaydedildi!\");\r\n+    }\r\n+\r\n+    private async Task KaydetOgrenciNotlari()\r\n+    {\r\n+        var studentScores = ogrenciler.SelectMany(student =>\r\n+            Sorular.Select(soru => new StudentScore\r\n+            {\r\n+                StudentId = student.Id,\r\n+                DersId = seciliDers.CourseCode,\r\n+                SinavTuruId = seciliSinavTur.SinavTurId,\r\n+                QuestionNumber = soru.SoruNumarasi,\r\n+                Score = ogrenciNotlar[student.Id][soru.SoruNumarasi],\r\n+                MaxScore = soru.Puan\r\n+            })\r\n+        ).ToList();\r\n+\r\n+        await StudentService.SaveStudentScoresAsync(studentScores);\r\n+        Console.WriteLine(\"Öğrenci notları kaydedildi!\");\r\n+    }\r\n+\r\n+    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n+    {\r\n+        if ((bool)e.Value)\r\n+        {\r\n+            if (!OgrenimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n+                OgrenimCiktilari[soru.SoruNumarasi] = new List<string>();\r\n+            OgrenimCiktilari[soru.SoruNumarasi].Add(ogrenimCiktisi);\r\n+        }\r\n+        else\r\n+        {\r\n+            OgrenimCiktilari[soru.SoruNumarasi]?.Remove(ogrenimCiktisi);\r\n+        }\r\n+    }\r\n+\r\n+    private void OnNextClick()\r\n+    {\r\n+        showStudentScores = true;\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1735080421509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,279 +219,4 @@\n     {\r\n         showStudentScores = true;\r\n     }\r\n }\r\n-@page \"/sinav-girisi\"\r\n-@inject IJSRuntime JS\r\n-@inject LessonService LessonService\r\n-@inject SinavTurService SinavTurService\r\n-@inject StudentService StudentService\r\n-@inject SoruService soruService\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-\r\n-<head>\r\n-    <link rel=\"stylesheet\" href=\"css\\Exam.css\">\r\n-</head>\r\n-\r\n-<h3>Sınav Girişi</h3>\r\n-\r\n-@if (isLoading)\r\n-{\r\n-    <p>Dersler ve sınav türleri yükleniyor...</p>\r\n-}\r\n-else\r\n-{\r\n-    <div class=\"form-group\">\r\n-        <label for=\"dersSecim\">Ders Seçin:</label>\r\n-        <select @onchange=\"DersSecildi\">\r\n-            <option disabled selected>Bir ders seçin</option>\r\n-            @foreach (var ders in Dersler)\r\n-            {\r\n-                <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-            }\r\n-        </select>\r\n-    </div>\r\n-}\r\n-\r\n-@if (seciliDers != null)\r\n-{\r\n-    <div class=\"form-group\">\r\n-        <label for=\"sinavSecim\">Sınav Türü Seçin:</label>\r\n-        <select @onchange=\"SinavTuruSecildi\">\r\n-            <option disabled selected>Bir sınav türü seçin</option>\r\n-            @foreach (var sinavTur in SinavTurleri)\r\n-            {\r\n-                <option value=\"@sinavTur.SinavTurId\">@sinavTur.Adi</option>\r\n-            }\r\n-        </select>\r\n-    </div>\r\n-\r\n-    <div class=\"form-group\">\r\n-        <label for=\"sinavYuzdesi\">Sınav Yüzdesi:</label>\r\n-        <input type=\"number\" @bind=\"sinavYuzdesi\" min=\"0\" max=\"100\" />\r\n-    </div>\r\n-}\r\n-\r\n-@if (seciliSinavTur != null && sinavYuzdesi.HasValue)\r\n-{\r\n-    <div class=\"form-group\">\r\n-        <label for=\"soruSayisi\">Soru Sayısını Girin:</label>\r\n-        <input type=\"number\" @bind=\"soruSayisi\" min=\"1\" />\r\n-    </div>\r\n-\r\n-    <button @onclick=\"SorulariOlustur\">Soruları Oluştur</button>\r\n-\r\n-    @if (Sorular.Count > 0)\r\n-    {\r\n-        <h4>Soru Puanları ve Öğrenim Çıktıları</h4>\r\n-        <table class=\"table\">\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Soru</th>\r\n-                    <th>Puan</th>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var soru in Sorular)\r\n-                {\r\n-                    <tr>\r\n-                        <td>Soru @soru.SoruNumarasi</td>\r\n-                        <td>\r\n-                            <input type=\"number\" @bind=\"soru.Puan\" min=\"0\" />\r\n-                        </td>\r\n-                        <td>\r\n-                            @foreach (var ogrenimCiktisi in seciliDers.LearningOutcomes)\r\n-                            {\r\n-                                <label>\r\n-                                    <input type=\"checkbox\" value=\"@ogrenimCiktisi.Description\"\r\n-                                        @onchange=\"@(e => OgrenimCiktisiSecildi(soru, ogrenimCiktisi.Description, e))\" />\r\n-                                    @ogrenimCiktisi.Description\r\n-                                </label>\r\n-                            }\r\n-                        </td>\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-\r\n-        <button @onclick=\"OnNextClick\">Sonraki</button>\r\n-        <button @onclick=\"Kaydet\">Verileri Kaydet</button>\r\n-    }\r\n-}\r\n-\r\n-@if (showStudentScores)\r\n-{\r\n-    <h4>Öğrenci Notları</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Öğrenci Numarası</th>\r\n-                <th>Öğrenci Adı</th>\r\n-                @foreach (var soru in Sorular)\r\n-                {\r\n-                    <th>Soru @soru.SoruNumarasi (@soru.Puan) Puan</th>\r\n-                }\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var ogrenci in ogrenciler)\r\n-            {\r\n-                <tr>\r\n-                    <td>@ogrenci.Numara</td>\r\n-                    <td>@ogrenci.Isim @ogrenci.Soyisim</td>\r\n-                    @foreach (var soru in Sorular)\r\n-                    {\r\n-                        <td>\r\n-                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" placeholder=\"Not girin\"\r\n-                                min=\"0\" max=\"@soru.Puan\" /> / @soru.Puan\r\n-                        </td>\r\n-                    }\r\n-                </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n-\r\n-    <button>Kaydet</button>\r\n-}\r\n-\r\n-@code {\r\n-    private List<Lesson> Dersler = new List<Lesson>();\r\n-    private List<SinavTur> SinavTurleri = new List<SinavTur>();\r\n-    private List<Soru> Sorular = new List<Soru>();\r\n-    private Lesson seciliDers;\r\n-    private SinavTur seciliSinavTur;\r\n-    private int soruSayisi;\r\n-    private int? sinavYuzdesi;\r\n-    private bool isLoading = true;\r\n-    private List<Student> ogrenciler = new List<Student>();\r\n-    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>();\r\n-    private Dictionary<int, Dictionary<int, List<string>>> OgretimCiktilari = new Dictionary<int, Dictionary<int,\r\n-    List<string>>>();\r\n-    private bool showStudentScores = false;\r\n-\r\n-    private async Task Kaydet()\r\n-    {\r\n-        try\r\n-        {\r\n-            foreach (var soru in Sorular)\r\n-            {\r\n-                soru.DersId = seciliDers.CourseCode;\r\n-                soru.SinavTuruId = seciliSinavTur.SinavTurId;\r\n-                soru.SinavYuzdesi = sinavYuzdesi.HasValue ? sinavYuzdesi.Value : 0;\r\n-\r\n-                if (OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n-                {\r\n-                    soru.OgrenimCiktilari = OgretimCiktilari[soru.SoruNumarasi].SelectMany(kv => kv.Value).Distinct().ToList();\r\n-                }\r\n-                else\r\n-                {\r\n-                    soru.OgrenimCiktilari = new List<string>();\r\n-                }\r\n-            }\r\n-\r\n-            await soruService.SorulariKaydetAsync(Sorular);\r\n-            Console.WriteLine(\"Sorular başarıyla kaydedildi!\");\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.WriteLine($\"Hata: {ex.Message}\");\r\n-        }\r\n-    }\r\n-\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons();\r\n-            ogrenciler = await StudentService.GetStudentsAsync();\r\n-            SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n-        }\r\n-        catch (Exception ex)\r\n-        {\r\n-            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n-        }\r\n-        finally\r\n-        {\r\n-            isLoading = false;\r\n-            StateHasChanged();\r\n-        }\r\n-    }\r\n-\r\n-    private async void DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        if (e.Value != null)\r\n-        {\r\n-            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n-            seciliSinavTur = null;\r\n-            Sorular.Clear();\r\n-            StateHasChanged();\r\n-        }\r\n-    }\r\n-\r\n-    private void SinavTuruSecildi(ChangeEventArgs e)\r\n-    {\r\n-        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == Convert.ToInt32(e.Value));\r\n-    }\r\n-\r\n-    private void SorulariOlustur()\r\n-    {\r\n-        Sorular.Clear();\r\n-        for (int i = 1; i <= soruSayisi; i++)\r\n-        {\r\n-            Sorular.Add(new Soru\r\n-                {\r\n-                    SoruNumarasi = i,\r\n-                    Puan = 0\r\n-                });\r\n-        }\r\n-\r\n-        foreach (var ogrenci in ogrenciler)\r\n-        {\r\n-            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n-            {\r\n-                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n-            }\r\n-\r\n-            foreach (var soru in Sorular)\r\n-            {\r\n-                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n-                {\r\n-                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private async Task OnNextClick()\r\n-    {\r\n-        showStudentScores = true;\r\n-    }\r\n-\r\n-    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n-    {\r\n-        if ((bool)e.Value)\r\n-        {\r\n-            if (!OgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n-            {\r\n-                OgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();\r\n-            }\r\n-\r\n-            foreach (var ogrenci in ogrenciler)\r\n-            {\r\n-                if (!OgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))\r\n-                {\r\n-                    OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();\r\n-                }\r\n-                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);\r\n-            }\r\n-        }\r\n-        else\r\n-        {\r\n-            foreach (var ogrenci in ogrenciler)\r\n-            {\r\n-                OgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1735081164713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,222 +0,0 @@\n-@page \"/sinav-girisi\"\r\n-@inject IJSRuntime JS\r\n-@inject LessonService LessonService\r\n-@inject SinavTurService SinavTurService\r\n-@inject StudentService StudentService\r\n-@inject SoruService SoruService\r\n-@using MudekServer.Models\r\n-@using MudekServer.Services\r\n-\r\n-<h3>Sınav Girişi</h3>\r\n-\r\n-@if (isLoading)\r\n-{\r\n-    <p>Veriler yükleniyor...</p>\r\n-}\r\n-else\r\n-{\r\n-    <div class=\"form-group\">\r\n-        <label for=\"dersSecim\">Ders Seçin:</label>\r\n-        <select @onchange=\"DersSecildi\">\r\n-            <option disabled selected>Bir ders seçin</option>\r\n-            @foreach (var ders in Dersler)\r\n-            {\r\n-                <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n-            }\r\n-        </select>\r\n-    </div>\r\n-}\r\n-\r\n-@if (seciliDers != null)\r\n-{\r\n-    <div class=\"form-group\">\r\n-        <label for=\"sinavSecim\">Sınav Türü Seçin:</label>\r\n-        <select @onchange=\"SinavTuruSecildi\">\r\n-            <option disabled selected>Bir sınav türü seçin</option>\r\n-            @foreach (var sinavTur in SinavTurleri)\r\n-            {\r\n-                <option value=\"@sinavTur.SinavTurId\">@sinavTur.Adi</option>\r\n-            }\r\n-        </select>\r\n-    </div>\r\n-\r\n-    <div class=\"form-group\">\r\n-        <label for=\"sinavYuzdesi\">Sınav Yüzdesi:</label>\r\n-        <input type=\"number\" @bind=\"sinavYuzdesi\" min=\"0\" max=\"100\" />\r\n-    </div>\r\n-}\r\n-\r\n-@if (seciliSinavTur != null && sinavYuzdesi.HasValue)\r\n-{\r\n-    <div class=\"form-group\">\r\n-        <label for=\"soruSayisi\">Soru Sayısı:</label>\r\n-        <input type=\"number\" @bind=\"soruSayisi\" min=\"1\" />\r\n-    </div>\r\n-    <button @onclick=\"SorulariOlustur\">Soruları Oluştur</button>\r\n-\r\n-    @if (Sorular.Any())\r\n-    {\r\n-        <h4>Soru Listesi</h4>\r\n-        <table class=\"table\">\r\n-            <thead>\r\n-                <tr>\r\n-                    <th>Soru</th>\r\n-                    <th>Puan</th>\r\n-                    <th>Öğrenim Çıktıları</th>\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                @foreach (var soru in Sorular)\r\n-                {\r\n-                    <tr>\r\n-                        <td>Soru @soru.SoruNumarasi</td>\r\n-                        <td>\r\n-                            <input type=\"number\" @bind=\"soru.Puan\" min=\"0\" />\r\n-                        </td>\r\n-                        <td>\r\n-                            @foreach (var ogrenimCiktisi in seciliDers.LearningOutcomes)\r\n-                            {\r\n-                                <label>\r\n-                                    <input type=\"checkbox\" value=\"@ogrenimCiktisi.Description\" \r\n-                                        @onchange=\"@(e => OgrenimCiktisiSecildi(soru, ogrenimCiktisi.Description, e))\" />\r\n-                                    @ogrenimCiktisi.Description\r\n-                                </label>\r\n-                            }\r\n-                        </td>\r\n-                    </tr>\r\n-                }\r\n-            </tbody>\r\n-        </table>\r\n-\r\n-        <button @onclick=\"OnNextClick\">Sonraki</button>\r\n-        <button @onclick=\"Kaydet\">Soruları Kaydet</button>\r\n-    }\r\n-}\r\n-\r\n-@if (showStudentScores)\r\n-{\r\n-    <h4>Öğrenci Notları</h4>\r\n-    <table class=\"table\">\r\n-        <thead>\r\n-            <tr>\r\n-                <th>Öğrenci Numarası</th>\r\n-                <th>Öğrenci Adı</th>\r\n-                @foreach (var soru in Sorular)\r\n-                {\r\n-                    <th>Soru @soru.SoruNumarasi (@soru.Puan) Puan</th>\r\n-                }\r\n-            </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-            @foreach (var ogrenci in ogrenciler)\r\n-            {\r\n-                <tr>\r\n-                    <td>@ogrenci.Numara</td>\r\n-                    <td>@ogrenci.Isim @ogrenci.Soyisim</td>\r\n-                    @foreach (var soru in Sorular)\r\n-                    {\r\n-                        <td>\r\n-                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" \r\n-                                min=\"0\" max=\"@soru.Puan\" /> / @soru.Puan\r\n-                        </td>\r\n-                    }\r\n-                </tr>\r\n-            }\r\n-        </tbody>\r\n-    </table>\r\n-\r\n-    <button @onclick=\"KaydetOgrenciNotlari\">Notları Kaydet</button>\r\n-}\r\n-\r\n-@code {\r\n-    private List<Lesson> Dersler = new();\r\n-    private List<SinavTur> SinavTurleri = new();\r\n-    private List<Soru> Sorular = new();\r\n-    private Lesson seciliDers;\r\n-    private SinavTur seciliSinavTur;\r\n-    private int soruSayisi;\r\n-    private int? sinavYuzdesi;\r\n-    private bool isLoading = true;\r\n-    private List<Student> ogrenciler = new();\r\n-    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new();\r\n-    private Dictionary<int, List<string>> OgrenimCiktilari = new();\r\n-    private bool showStudentScores = false;\r\n-\r\n-    protected override async Task OnInitializedAsync()\r\n-    {\r\n-        try\r\n-        {\r\n-            Dersler = await LessonService.GetLessons();\r\n-            SinavTurleri = await SinavTurService.GetSinavTurleriAsync();\r\n-            ogrenciler = await StudentService.GetStudentsAsync();\r\n-        }\r\n-        finally\r\n-        {\r\n-            isLoading = false;\r\n-        }\r\n-    }\r\n-\r\n-    private void DersSecildi(ChangeEventArgs e)\r\n-    {\r\n-        seciliDers = Dersler.FirstOrDefault(d => d.CourseCode == e.Value.ToString());\r\n-        seciliSinavTur = null;\r\n-        Sorular.Clear();\r\n-    }\r\n-\r\n-    private void SinavTuruSecildi(ChangeEventArgs e)\r\n-    {\r\n-        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.SinavTurId == int.Parse(e.Value.ToString()));\r\n-    }\r\n-\r\n-    private void SorulariOlustur()\r\n-    {\r\n-        Sorular.Clear();\r\n-        for (int i = 1; i <= soruSayisi; i++)\r\n-        {\r\n-            Sorular.Add(new Soru { SoruNumarasi = i, DersId = seciliDers.CourseCode, SinavTuruId = seciliSinavTur.SinavTurId });\r\n-        }\r\n-    }\r\n-\r\n-    private async Task Kaydet()\r\n-    {\r\n-        await SoruService.SorulariKaydetAsync(Sorular);\r\n-        Console.WriteLine(\"Sorular kaydedildi!\");\r\n-    }\r\n-\r\n-    private async Task KaydetOgrenciNotlari()\r\n-    {\r\n-        var studentScores = ogrenciler.SelectMany(student =>\r\n-            Sorular.Select(soru => new StudentScore\r\n-            {\r\n-                StudentId = student.Id,\r\n-                DersId = seciliDers.CourseCode,\r\n-                SinavTuruId = seciliSinavTur.SinavTurId,\r\n-                QuestionNumber = soru.SoruNumarasi,\r\n-                Score = ogrenciNotlar[student.Id][soru.SoruNumarasi],\r\n-                MaxScore = soru.Puan\r\n-            })\r\n-        ).ToList();\r\n-\r\n-        await StudentService.SaveStudentScoresAsync(studentScores);\r\n-        Console.WriteLine(\"Öğrenci notları kaydedildi!\");\r\n-    }\r\n-\r\n-    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n-    {\r\n-        if ((bool)e.Value)\r\n-        {\r\n-            if (!OgrenimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n-                OgrenimCiktilari[soru.SoruNumarasi] = new List<string>();\r\n-            OgrenimCiktilari[soru.SoruNumarasi].Add(ogrenimCiktisi);\r\n-        }\r\n-        else\r\n-        {\r\n-            OgrenimCiktilari[soru.SoruNumarasi]?.Remove(ogrenimCiktisi);\r\n-        }\r\n-    }\r\n-\r\n-    private void OnNextClick()\r\n-    {\r\n-        showStudentScores = true;\r\n-    }\r\n-}\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734890692371,
            "name": "Commit-0",
            "content": "@page \"/sinav-girisi\"\r\n@inject IJSRuntime JS\r\n@inject LessonService LessonService\r\n@inject SinavTurService SinavTurService\r\n@inject StudentService StudentService\r\n\r\n@using MudekServer.Models\r\n@using MudekServer.Services\r\n\r\n<head>\r\n    <link rel=\"stylesheet\" href=\"MudekServer\\wwwroot\\css\\Exam.css\">\r\n</head>\r\n\r\n<h3>Sınav Girişi</h3>\r\n\r\n@if (isLoading)\r\n{\r\n    <p>Dersler ve sınav türleri yükleniyor...</p>\r\n}\r\nelse\r\n{\r\n    <div class=\"form-group\">\r\n        <label for=\"dersSecim\">Ders Seçin:</label>\r\n        <select @onchange=\"DersSecildi\">\r\n            <option disabled selected>Bir ders seçin</option>\r\n            @foreach (var ders in Dersler)\r\n            {\r\n                <option value=\"@ders.CourseCode\">@ders.CourseName</option>\r\n            }\r\n        </select>\r\n    </div>\r\n}\r\n\r\n@if (seciliDers != null)\r\n{\r\n    <div class=\"form-group\">\r\n        <label for=\"sinavSecim\">Sınav Türü Seçin:</label>\r\n        <select @onchange=\"SinavTuruSecildi\">\r\n            <option disabled selected>Bir sınav türü seçin</option>\r\n            @foreach (var sinavTur in SinavTurleri)\r\n            {\r\n                <option value=\"@sinavTur.Adi\">@sinavTur.Adi</option>\r\n            }\r\n        </select>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label for=\"sinavYuzdesi\">Sınav Yüzdesi:</label>\r\n        <input type=\"number\" @bind=\"sinavYuzdesi\" min=\"0\" max=\"100\" />\r\n    </div>\r\n}\r\n\r\n@if (seciliSinavTur != null && sinavYuzdesi.HasValue)\r\n{\r\n    <div class=\"form-group\">\r\n        <label for=\"soruSayisi\">Soru Sayısını Girin:</label>\r\n        <input type=\"number\" @bind=\"soruSayisi\" min=\"1\" />\r\n    </div>\r\n\r\n    <button @onclick=\"SorulariOlustur\">Soruları Oluştur</button>\r\n\r\n    @if (Sorular.Count > 0)\r\n    {\r\n        <h4>Soru Puanları ve Öğrenim Çıktıları</h4>\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Soru</th>\r\n                    <th>Puan</th>\r\n                    <th>Öğrenim Çıktıları</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @foreach (var soru in Sorular)\r\n                {\r\n                    <tr>\r\n                        <td>Soru @soru.SoruNumarasi</td>\r\n                        <td>\r\n                            <input type=\"number\" @bind=\"soru.Puan\" min=\"0\" @oninput=\"CheckTotalPuan\" />\r\n                        </td>\r\n                        <td>\r\n                            @foreach (var ogrenimCiktisi in seciliDers.LearningOutcomes)\r\n                            {\r\n                                <label>\r\n                                    <input type=\"checkbox\" value=\"@ogrenimCiktisi.Description\"\r\n                                        @onchange=\"@(e => OgrenimCiktisiSecildi(soru, ogrenimCiktisi.Description, e))\" />\r\n                                    @ogrenimCiktisi.Description\r\n                                </label>\r\n                            }\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n\r\n        <button @onclick=\"OnNextClick\">Sonraki</button>\r\n    }\r\n}\r\n\r\n@if (showStudentScores)\r\n{\r\n    <h4>Öğrenci Notları</h4>\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>Öğrenci Numarası</th>\r\n                <th>Öğrenci Adı</th>\r\n                @foreach (var soru in Sorular)\r\n                {\r\n                    <th>Soru @soru.SoruNumarasi</th>\r\n                }\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var ogrenci in ogrenciler)\r\n            {\r\n                <tr>\r\n                    <td>@ogrenci.Numara</td>\r\n                    <td>@ogrenci.Isim @ogrenci.Soyisim</td>\r\n                    @foreach (var soru in Sorular)\r\n                    {\r\n                        <td>\r\n                            <input type=\"number\" @bind=\"ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi]\" placeholder=\"Not girin\"\r\n                                min=\"0\" max=\"@soru.Puan\" /> / @soru.Puan\r\n                        </td>\r\n                    }\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n\r\n    <button >Kaydet</button>\r\n}\r\n\r\n\r\n@code {\r\n    private List<Lesson> Dersler = new List<Lesson>();\r\n    private List<SinavTur> SinavTurleri = new List<SinavTur>(); // Bu listeyi dinamik hale getireceğiz\r\n    private List<Soru> Sorular = new List<Soru>();\r\n    private Lesson seciliDers;\r\n    private SinavTur seciliSinavTur;\r\n    private int soruSayisi;\r\n    private int? sinavYuzdesi;\r\n    private bool isLoading = true;\r\n    private List<Student> ogrenciler = new List<Student>(); // Öğrenci Listesi\r\n    private Dictionary<int, Dictionary<int, int>> ogrenciNotlar = new Dictionary<int, Dictionary<int, int>>(); // Öğrenci Notları\r\n    private Dictionary<int, Dictionary<int, List<string>>> ogrenciOgretimCiktilari = new Dictionary<int, Dictionary<int, List<string>>>(); // Öğrenim çıktıları\r\n\r\n    private bool showStudentScores = false; // Öğrenci notlarını göstermek için kullanılan flag\r\n\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        try\r\n        {\r\n            // Öğrencileri ve sınav türlerini asenkron olarak veritabanından al\r\n            Dersler = await LessonService.GetLessons();\r\n            ogrenciler = await StudentService.GetStudentsAsync();\r\n            SinavTurleri = await SinavTurService.GetSinavTurleriAsync(); // SinavTurService üzerinden sınav türlerini alıyoruz\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Veri yüklenirken hata oluştu: {ex.Message}\");\r\n        }\r\n        finally\r\n        {\r\n            // Yükleme durumu güncelleniyor\r\n            isLoading = false;\r\n            StateHasChanged();\r\n        }\r\n    }\r\n\r\n    private async void DersSecildi(ChangeEventArgs e)\r\n    {\r\n        if (e.Value != null)\r\n        {\r\n            // Ders seçimi yapıldı, ders bilgilerini yükle\r\n            seciliDers = await LessonService.GetLessonByCodeAsync(e.Value.ToString());\r\n            seciliSinavTur = null; // Sınav türünü sıfırlıyoruz\r\n            Sorular.Clear(); // Soruları sıfırlıyoruz\r\n            StateHasChanged();\r\n        }\r\n    }\r\n\r\n    private void SinavTuruSecildi(ChangeEventArgs e)\r\n    {\r\n        seciliSinavTur = SinavTurleri.FirstOrDefault(st => st.Adi == e.Value.ToString());\r\n    }\r\n\r\n    private void SorulariOlustur()\r\n    {\r\n        Sorular.Clear();\r\n        for (int i = 1; i <= soruSayisi; i++)\r\n        {\r\n            Sorular.Add(new Soru\r\n            {\r\n                SoruNumarasi = i,\r\n                Puan = 0\r\n            });\r\n        }\r\n\r\n        // Sorular oluşturulduktan sonra, ogrenciNotlar sözlüğünü başlatıyoruz.\r\n        foreach (var ogrenci in ogrenciler)\r\n        {\r\n            if (!ogrenciNotlar.ContainsKey(ogrenci.Id))\r\n            {\r\n                ogrenciNotlar[ogrenci.Id] = new Dictionary<int, int>();\r\n            }\r\n\r\n            foreach (var soru in Sorular)\r\n            {\r\n                // Her öğrenci ve her soru için puan başlatıyoruz (sıfır).\r\n                if (!ogrenciNotlar[ogrenci.Id].ContainsKey(soru.SoruNumarasi))\r\n                {\r\n                    ogrenciNotlar[ogrenci.Id][soru.SoruNumarasi] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void CheckTotalPuan()\r\n    {\r\n        // Toplam puan hesaplaması\r\n    }\r\n\r\n    private async Task OnNextClick()\r\n    {\r\n        // Geçiş işlemi\r\n        showStudentScores = true; // Öğrenci notlarını göstermek için flag'yi true yapıyoruz.\r\n    }\r\n\r\n    // OgrenimCiktisiSecildi metodu\r\n    private void OgrenimCiktisiSecildi(Soru soru, string ogrenimCiktisi, ChangeEventArgs e)\r\n    {\r\n        if ((bool)e.Value) // Eğer checkbox seçili ise\r\n        {\r\n            // Öğrenim çıktısını ekle\r\n            if (!ogrenciOgretimCiktilari.ContainsKey(soru.SoruNumarasi))\r\n            {\r\n                ogrenciOgretimCiktilari[soru.SoruNumarasi] = new Dictionary<int, List<string>>();\r\n            }\r\n\r\n            foreach (var ogrenci in ogrenciler)\r\n            {\r\n                if (!ogrenciOgretimCiktilari[soru.SoruNumarasi].ContainsKey(ogrenci.Id))\r\n                {\r\n                    ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id] = new List<string>();\r\n                }\r\n                ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id].Add(ogrenimCiktisi);\r\n            }\r\n        }\r\n        else // Eğer checkbox seçimi kaldırıldıysa\r\n        {\r\n            foreach (var ogrenci in ogrenciler)\r\n            {\r\n                ogrenciOgretimCiktilari[soru.SoruNumarasi][ogrenci.Id]?.Remove(ogrenimCiktisi);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}